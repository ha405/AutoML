{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport styles from './conversation_style.module.css';\nimport { useLocation } from 'react-router-dom';\nimport { callApi } from '../api/client';\n\n// 1) Treat \"system\" as \"ai\"\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst parseMessage = msg => {\n  if (typeof msg !== 'string') return {\n    sender: 'unknown',\n    content: String(msg)\n  };\n  const [senderPart] = msg.split(':', 1);\n  let sender = senderPart.toLowerCase();\n  if (sender === 'system') sender = 'ai'; // ← map system ⇒ ai\n  let content = msg.slice(senderPart.length + 1).trim();\n  return {\n    sender,\n    content\n  };\n};\nexport default function Conversation() {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const [conversation, setConversation] = useState((state === null || state === void 0 ? void 0 : state.conversation) || []);\n  const [userResponse, setUserResponse] = useState('');\n  const [isFinal, setIsFinal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const conversationEndRef = useRef(null);\n\n  // 2) Scroll on new AI question\n  useEffect(() => {\n    var _conversationEndRef$c;\n    (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [conversation]);\n\n  // 3) On mount: if we only have the INITIAL system prompt, fetch the first real question\n  useEffect(() => {\n    const loadFirstQuestion = async () => {\n      if (conversation.length === 2) {\n        setIsLoading(true);\n        try {\n          const data = await callApi('conversation', 'GET');\n          setConversation(data.conversation || []);\n          if (data.final_problem) setIsFinal(true);\n        } catch (err) {\n          console.error('Failed to load first question:', err);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n    loadFirstQuestion();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // 4) When user submits, send their answer, then grab next question\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userResponse.trim() || isLoading) return;\n    setIsLoading(true);\n    const answer = userResponse.trim();\n    setUserResponse('');\n    try {\n      const data = await callApi('conversation', 'POST', {\n        user_response: answer\n      });\n      setConversation(data.conversation || []);\n      if (data.final_problem) setIsFinal(true);\n    } catch (err) {\n      console.error('API call failed:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.conversationPageWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Getting On Track...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.conversation,\n        children: [conversation.map(parseMessage).filter(({\n          sender\n        }) => sender === 'ai').map(({\n          content\n        }, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.aiBubble,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: conversationEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), isFinal ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.savedMessage,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your final business problem has been saved for later use.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"form\", {\n        className: styles.responseForm,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your answer here...\",\n          value: userResponse,\n          onChange: e => setUserResponse(e.target.value),\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: styles.submitButton,\n          disabled: isLoading || !userResponse.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(Conversation, \"ORYuhkNOh4fAv4YF/lzFBmSyC70=\", false, function () {\n  return [useLocation];\n});\n_c = Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useEffect","useState","useRef","styles","useLocation","callApi","jsxDEV","_jsxDEV","parseMessage","msg","sender","content","String","senderPart","split","toLowerCase","slice","length","trim","Conversation","_s","state","conversation","setConversation","userResponse","setUserResponse","isFinal","setIsFinal","isLoading","setIsLoading","conversationEndRef","_conversationEndRef$c","current","scrollIntoView","behavior","loadFirstQuestion","data","final_problem","err","console","error","handleSubmit","e","preventDefault","answer","user_response","className","conversationPageWrapper","children","chatWindow","header","fileName","_jsxFileName","lineNumber","columnNumber","map","filter","i","aiBubble","ref","savedMessage","responseForm","onSubmit","type","placeholder","value","onChange","target","required","disabled","submitButton","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/Conversation.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport styles from './conversation_style.module.css';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { callApi } from '../api/client';\r\n\r\n// 1) Treat \"system\" as \"ai\"\r\nconst parseMessage = (msg) => {\r\n  if (typeof msg !== 'string') return { sender: 'unknown', content: String(msg) };\r\n  const [senderPart] = msg.split(':', 1);\r\n  let sender = senderPart.toLowerCase();\r\n  if (sender === 'system') sender = 'ai';       // ← map system ⇒ ai\r\n  let content = msg.slice(senderPart.length + 1).trim();\r\n  return { sender, content };\r\n};\r\n\r\nexport default function Conversation() {\r\n  const { state } = useLocation();\r\n  const [conversation, setConversation] = useState(state?.conversation || []);\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [isFinal, setIsFinal]     = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const conversationEndRef = useRef(null);\r\n\r\n  // 2) Scroll on new AI question\r\n  useEffect(() => {\r\n    conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [conversation]);\r\n\r\n  // 3) On mount: if we only have the INITIAL system prompt, fetch the first real question\r\n  useEffect(() => {\r\n    const loadFirstQuestion = async () => {\r\n      if (conversation.length === 2) {\r\n        setIsLoading(true);\r\n        try {\r\n          const data = await callApi('conversation', 'GET');\r\n          setConversation(data.conversation || []);\r\n          if (data.final_problem) setIsFinal(true);\r\n        } catch (err) {\r\n          console.error('Failed to load first question:', err);\r\n        } finally {\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n    loadFirstQuestion();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // 4) When user submits, send their answer, then grab next question\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userResponse.trim() || isLoading) return;\r\n\r\n    setIsLoading(true);\r\n    const answer = userResponse.trim();\r\n    setUserResponse('');\r\n\r\n    try {\r\n      const data = await callApi('conversation', 'POST', { user_response: answer });\r\n      setConversation(data.conversation || []);\r\n      if (data.final_problem) setIsFinal(true);\r\n    } catch (err) {\r\n      console.error('API call failed:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.conversationPageWrapper}>\r\n      <div className={styles.chatWindow}>\r\n        <div className={styles.header}>\r\n          <h1>Getting On Track...</h1>\r\n        </div>\r\n\r\n        <div className={styles.conversation}>\r\n          {/*\r\n            5) Only render messages where sender === 'ai'\r\n          */}\r\n          {conversation\r\n            .map(parseMessage)\r\n            .filter(({ sender }) => sender === 'ai')\r\n            .map(({ content }, i) => (\r\n              <div key={i} className={styles.aiBubble}>\r\n                <p>{content}</p>\r\n              </div>\r\n            ))}\r\n          <div ref={conversationEndRef} />\r\n        </div>\r\n\r\n        {isFinal ? (\r\n          <div className={styles.savedMessage}>\r\n            <p>Your final business problem has been saved for later use.</p>\r\n          </div>\r\n        ) : (\r\n          <form className={styles.responseForm} onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type your answer here...\"\r\n              value={userResponse}\r\n              onChange={(e) => setUserResponse(e.target.value)}\r\n              required\r\n              disabled={isLoading}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className={styles.submitButton}\r\n              disabled={isLoading || !userResponse.trim()}\r\n            >\r\n              Send\r\n            </button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,iCAAiC;AACpD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,eAAe;;AAEvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAIC,GAAG,IAAK;EAC5B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO;IAAEC,MAAM,EAAE,SAAS;IAAEC,OAAO,EAAEC,MAAM,CAACH,GAAG;EAAE,CAAC;EAC/E,MAAM,CAACI,UAAU,CAAC,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;EACtC,IAAIJ,MAAM,GAAGG,UAAU,CAACE,WAAW,CAAC,CAAC;EACrC,IAAIL,MAAM,KAAK,QAAQ,EAAEA,MAAM,GAAG,IAAI,CAAC,CAAO;EAC9C,IAAIC,OAAO,GAAGF,GAAG,CAACO,KAAK,CAACH,UAAU,CAACI,MAAM,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EACrD,OAAO;IAAER,MAAM;IAAEC;EAAQ,CAAC;AAC5B,CAAC;AAED,eAAe,SAASQ,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAM,CAAC,GAAGjB,WAAW,CAAC,CAAC;EAC/B,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,CAAAoB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,YAAY,KAAI,EAAE,CAAC;EAC3E,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACyB,OAAO,EAAEC,UAAU,CAAC,GAAO1B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC2B,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM6B,kBAAkB,GAAG5B,MAAM,CAAC,IAAI,CAAC;;EAEvC;EACAF,SAAS,CAAC,MAAM;IAAA,IAAA+B,qBAAA;IACd,CAAAA,qBAAA,GAAAD,kBAAkB,CAACE,OAAO,cAAAD,qBAAA,uBAA1BA,qBAAA,CAA4BE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EACpE,CAAC,EAAE,CAACZ,YAAY,CAAC,CAAC;;EAElB;EACAtB,SAAS,CAAC,MAAM;IACd,MAAMmC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAIb,YAAY,CAACL,MAAM,KAAK,CAAC,EAAE;QAC7BY,YAAY,CAAC,IAAI,CAAC;QAClB,IAAI;UACF,MAAMO,IAAI,GAAG,MAAM/B,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC;UACjDkB,eAAe,CAACa,IAAI,CAACd,YAAY,IAAI,EAAE,CAAC;UACxC,IAAIc,IAAI,CAACC,aAAa,EAAEV,UAAU,CAAC,IAAI,CAAC;QAC1C,CAAC,CAAC,OAAOW,GAAG,EAAE;UACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;QACtD,CAAC,SAAS;UACRT,YAAY,CAAC,KAAK,CAAC;QACrB;MACF;IACF,CAAC;IACDM,iBAAiB,CAAC,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAACnB,YAAY,CAACN,IAAI,CAAC,CAAC,IAAIU,SAAS,EAAE;IAEvCC,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMe,MAAM,GAAGpB,YAAY,CAACN,IAAI,CAAC,CAAC;IAClCO,eAAe,CAAC,EAAE,CAAC;IAEnB,IAAI;MACF,MAAMW,IAAI,GAAG,MAAM/B,OAAO,CAAC,cAAc,EAAE,MAAM,EAAE;QAAEwC,aAAa,EAAED;MAAO,CAAC,CAAC;MAC7ErB,eAAe,CAACa,IAAI,CAACd,YAAY,IAAI,EAAE,CAAC;MACxC,IAAIc,IAAI,CAACC,aAAa,EAAEV,UAAU,CAAC,IAAI,CAAC;IAC1C,CAAC,CAAC,OAAOW,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEF,GAAG,CAAC;IACxC,CAAC,SAAS;MACRT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,oBACEtB,OAAA;IAAKuC,SAAS,EAAE3C,MAAM,CAAC4C,uBAAwB;IAAAC,QAAA,eAC7CzC,OAAA;MAAKuC,SAAS,EAAE3C,MAAM,CAAC8C,UAAW;MAAAD,QAAA,gBAChCzC,OAAA;QAAKuC,SAAS,EAAE3C,MAAM,CAAC+C,MAAO;QAAAF,QAAA,eAC5BzC,OAAA;UAAAyC,QAAA,EAAI;QAAmB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAEN/C,OAAA;QAAKuC,SAAS,EAAE3C,MAAM,CAACmB,YAAa;QAAA0B,QAAA,GAIjC1B,YAAY,CACViC,GAAG,CAAC/C,YAAY,CAAC,CACjBgD,MAAM,CAAC,CAAC;UAAE9C;QAAO,CAAC,KAAKA,MAAM,KAAK,IAAI,CAAC,CACvC6C,GAAG,CAAC,CAAC;UAAE5C;QAAQ,CAAC,EAAE8C,CAAC,kBAClBlD,OAAA;UAAauC,SAAS,EAAE3C,MAAM,CAACuD,QAAS;UAAAV,QAAA,eACtCzC,OAAA;YAAAyC,QAAA,EAAIrC;UAAO;YAAAwC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC,GADRG,CAAC;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEN,CACN,CAAC,eACJ/C,OAAA;UAAKoD,GAAG,EAAE7B;QAAmB;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,EAEL5B,OAAO,gBACNnB,OAAA;QAAKuC,SAAS,EAAE3C,MAAM,CAACyD,YAAa;QAAAZ,QAAA,eAClCzC,OAAA;UAAAyC,QAAA,EAAG;QAAyD;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7D,CAAC,gBAEN/C,OAAA;QAAMuC,SAAS,EAAE3C,MAAM,CAAC0D,YAAa;QAACC,QAAQ,EAAErB,YAAa;QAAAO,QAAA,gBAC3DzC,OAAA;UACEwD,IAAI,EAAC,MAAM;UACXC,WAAW,EAAC,0BAA0B;UACtCC,KAAK,EAAEzC,YAAa;UACpB0C,QAAQ,EAAGxB,CAAC,IAAKjB,eAAe,CAACiB,CAAC,CAACyB,MAAM,CAACF,KAAK,CAAE;UACjDG,QAAQ;UACRC,QAAQ,EAAEzC;QAAU;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,eACF/C,OAAA;UACEwD,IAAI,EAAC,QAAQ;UACbjB,SAAS,EAAE3C,MAAM,CAACmE,YAAa;UAC/BD,QAAQ,EAAEzC,SAAS,IAAI,CAACJ,YAAY,CAACN,IAAI,CAAC,CAAE;UAAA8B,QAAA,EAC7C;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClC,EAAA,CArGuBD,YAAY;EAAA,QAChBf,WAAW;AAAA;AAAAmE,EAAA,GADPpD,YAAY;AAAA,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}