{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './conversation_style.module.css';\nimport { callApi } from '../api/client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Conversation() {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const [conversation, setConversation] = useState([]);\n  const [userResponse, setUserResponse] = useState('');\n  const [isFinal, setIsFinal] = useState(false);\n  const [finalProblemText, setFinalProblemText] = useState(''); // State for final problem text\n  const [isLoading, setIsLoading] = useState(false);\n  const conversationEndRef = useRef(null);\n\n  // Scroll effect (only relevant when conversation is showing)\n  useEffect(() => {\n    if (!isFinal) {\n      var _conversationEndRef$c;\n      (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [conversation, isFinal]);\n\n  // Fetch first question or initialize from state\n  useEffect(() => {\n    const fetchFirstQuestion = async () => {\n      var _state$conversation;\n      if (conversation.length === 0 && (state === null || state === void 0 ? void 0 : (_state$conversation = state.conversation) === null || _state$conversation === void 0 ? void 0 : _state$conversation.length) === 2 && !(state !== null && state !== void 0 && state.final_problem)) {\n        // Ensure not already final from state\n        setIsLoading(true);\n        try {\n          var _data$conversation;\n          const data = await callApi('conversation', 'GET');\n          const initialFilteredConvo = ((_data$conversation = data.conversation) === null || _data$conversation === void 0 ? void 0 : _data$conversation.filter((line, index) => {\n            return !(index === 0 && line.startsWith('User:'));\n          })) || [];\n          setConversation(initialFilteredConvo);\n          if (data.final_problem) {\n            setFinalProblemText(data.final_problem); // Store final problem\n            setIsFinal(true); // Set final flag\n          }\n        } catch (err) {\n          console.error('Failed to load first question:', err);\n        } finally {\n          setIsLoading(false);\n        }\n      } else if (state !== null && state !== void 0 && state.conversation) {\n        // Initialize from location state if present\n        const initialFilteredConvo = state.conversation.filter((line, index) => {\n          return !(index === 0 && line.startsWith('User:'));\n        }) || [];\n\n        // Check if final problem already exists in state\n        if (state.final_problem) {\n          setFinalProblemText(state.final_problem);\n          setIsFinal(true);\n        } else if (conversation.length === 0 && !isLoading) {\n          // Only set conversation if not final and not already set/loading\n          setConversation(initialFilteredConvo);\n        }\n      }\n    };\n    fetchFirstQuestion();\n  }, [state]); // Rerun if location state changes\n\n  // Handle user submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userResponse.trim() || isLoading || isFinal) return; // Prevent submission if final\n\n    const answer = userResponse.trim();\n    const currentConvo = conversation;\n    setUserResponse('');\n    setIsLoading(true);\n\n    // Optimistic UI update (add user message)\n    const updatedConvoUI = [...currentConvo, `User: ${answer}`];\n    setConversation(updatedConvoUI);\n    try {\n      const data = await callApi('conversation', 'POST', {\n        user_response: answer\n      });\n      const newConvoFromBackend = data.conversation || [];\n\n      // Filter backend response (remove potential initial user prompt)\n      const finalFilteredConvo = newConvoFromBackend.filter((line, i) => {\n        return !(i === 0 && line.startsWith('User:'));\n      });\n\n      // Check if the process is now final\n      if (data.final_problem) {\n        setFinalProblemText(data.final_problem); // Store the final problem text\n        setIsFinal(true); // Set the final flag\n        // No need to setConversation here, as we'll hide it when isFinal is true\n      } else {\n        // If not final, update the conversation display\n        setConversation(finalFilteredConvo);\n      }\n    } catch (err) {\n      console.error('API call failed:', err);\n      // Rollback optimistic update on error only if not final\n      if (!isFinal) {\n        setConversation(currentConvo);\n      }\n      setUserResponse(answer); // Put text back in input\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Clean message prefixes and question numbers\n  const cleanMessage = (msg, prefixToRemove) => {\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\n    return cleaned;\n  };\n\n  // Placeholder for system prompts (replace if needed)\n  const feedback = {\n    SYSTEM_PROMPT_INITIAL: \"placeholder for initial system prompt text\",\n    SYSTEM_PROMPT_NEXT_ITERATION: \"placeholder for next iteration system prompt text\"\n  };\n\n  // Decide if a system message should be displayed\n  const shouldDisplaySystemMessage = msg => {\n    const content = msg.replace('System:', '').trim().toLowerCase();\n    const normalizedContent = content.replace(/\\*\\*/g, '');\n    return !(content.startsWith('you are ') || content.startsWith('your task is') || content.includes('format 1:') || content.includes('format 2:') || content.includes('decide if you now have enough information') || content.includes('continue the process') || normalizedContent.includes('structure a well-defined business problem statement') || normalizedContent.includes(\"your response should only include the final business problem statement\") || normalizedContent.includes(\"based on the entire conversation\") && normalizedContent.includes(\"final business problem statement\") || content === feedback.SYSTEM_PROMPT_INITIAL.toLowerCase() || content === feedback.SYSTEM_PROMPT_NEXT_ITERATION.toLowerCase());\n  };\n\n  // Main component rendering\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.conversationPageWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Getting On Track...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), isFinal ?\n      /*#__PURE__*/\n      // Display Final Problem View\n      _jsxDEV(\"div\", {\n        className: styles.finalProblemDisplay,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final Business Problem:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.finalProblemText,\n          children: finalProblemText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.savedMessage,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This final business problem has been saved for later use.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Display Conversation View\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.conversation,\n          children: [conversation.map((msg, idx) => {\n            if (msg.startsWith('User:')) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.userBubble,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: cleanMessage(msg, 'User:')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 23\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this);\n            } else if (msg.startsWith('AI:')) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.aiBubble,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: cleanMessage(msg, 'AI:')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 23\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 21\n              }, this);\n            } else if (msg.startsWith('System:')) {\n              if (shouldDisplaySystemMessage(msg)) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: styles.aiBubble,\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: cleanMessage(msg, 'System:')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 32\n                  }, this)\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 29\n                }, this);\n              }\n            }\n            return null; // Render nothing for filtered system messages\n          }), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.loadingIndicator,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Thinking...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 70\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: conversationEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: styles.responseForm,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your answer here...\",\n            value: userResponse,\n            onChange: e => setUserResponse(e.target.value),\n            required: true,\n            disabled: isLoading // Disable input while loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: styles.submitButton,\n            disabled: isLoading || !userResponse.trim() // Disable button if loading or input empty\n            ,\n            children: isLoading ? 'Sending...' : 'Send'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n}\n_s(Conversation, \"Gd1JxSKXmytcBLhSqw9lHYskS24=\", false, function () {\n  return [useLocation];\n});\n_c = Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","styles","callApi","jsxDEV","_jsxDEV","Fragment","_Fragment","Conversation","_s","state","conversation","setConversation","userResponse","setUserResponse","isFinal","setIsFinal","finalProblemText","setFinalProblemText","isLoading","setIsLoading","conversationEndRef","_conversationEndRef$c","current","scrollIntoView","behavior","fetchFirstQuestion","_state$conversation","length","final_problem","_data$conversation","data","initialFilteredConvo","filter","line","index","startsWith","err","console","error","handleSubmit","e","preventDefault","trim","answer","currentConvo","updatedConvoUI","user_response","newConvoFromBackend","finalFilteredConvo","i","cleanMessage","msg","prefixToRemove","cleaned","substring","replace","feedback","SYSTEM_PROMPT_INITIAL","SYSTEM_PROMPT_NEXT_ITERATION","shouldDisplaySystemMessage","content","toLowerCase","normalizedContent","includes","className","conversationPageWrapper","children","chatWindow","header","fileName","_jsxFileName","lineNumber","columnNumber","finalProblemDisplay","savedMessage","map","idx","userBubble","aiBubble","loadingIndicator","ref","responseForm","onSubmit","type","placeholder","value","onChange","target","required","disabled","submitButton","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/Conversation.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './conversation_style.module.css';\r\nimport { callApi } from '../api/client';\r\n\r\nexport default function Conversation() {\r\n  const { state } = useLocation();\r\n  const [conversation, setConversation] = useState([]);\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [isFinal, setIsFinal] = useState(false);\r\n  const [finalProblemText, setFinalProblemText] = useState(''); // State for final problem text\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const conversationEndRef = useRef(null);\r\n\r\n  // Scroll effect (only relevant when conversation is showing)\r\n  useEffect(() => {\r\n    if (!isFinal) {\r\n      conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [conversation, isFinal]);\r\n\r\n\r\n  // Fetch first question or initialize from state\r\n  useEffect(() => {\r\n    const fetchFirstQuestion = async () => {\r\n       if (conversation.length === 0 && state?.conversation?.length === 2 && !state?.final_problem) { // Ensure not already final from state\r\n           setIsLoading(true);\r\n           try {\r\n             const data = await callApi('conversation', 'GET');\r\n             const initialFilteredConvo = data.conversation?.filter((line, index) => {\r\n                 return !(index === 0 && line.startsWith('User:'));\r\n             }) || [];\r\n             setConversation(initialFilteredConvo);\r\n             if (data.final_problem) {\r\n                 setFinalProblemText(data.final_problem); // Store final problem\r\n                 setIsFinal(true); // Set final flag\r\n             }\r\n           } catch (err) {\r\n             console.error('Failed to load first question:', err);\r\n           } finally {\r\n             setIsLoading(false);\r\n           }\r\n       } else if (state?.conversation) {\r\n           // Initialize from location state if present\r\n           const initialFilteredConvo = state.conversation.filter((line, index) => {\r\n               return !(index === 0 && line.startsWith('User:'));\r\n           }) || [];\r\n\r\n           // Check if final problem already exists in state\r\n           if (state.final_problem) {\r\n                setFinalProblemText(state.final_problem);\r\n                setIsFinal(true);\r\n           } else if (conversation.length === 0 && !isLoading) {\r\n                // Only set conversation if not final and not already set/loading\r\n                setConversation(initialFilteredConvo);\r\n           }\r\n       }\r\n    };\r\n    fetchFirstQuestion();\r\n  }, [state]); // Rerun if location state changes\r\n\r\n\r\n  // Handle user submission\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userResponse.trim() || isLoading || isFinal) return; // Prevent submission if final\r\n\r\n    const answer = userResponse.trim();\r\n    const currentConvo = conversation;\r\n\r\n    setUserResponse('');\r\n    setIsLoading(true);\r\n\r\n    // Optimistic UI update (add user message)\r\n    const updatedConvoUI = [...currentConvo, `User: ${answer}`];\r\n    setConversation(updatedConvoUI);\r\n\r\n    try {\r\n      const data = await callApi('conversation', 'POST', { user_response: answer });\r\n      const newConvoFromBackend = data.conversation || [];\r\n\r\n      // Filter backend response (remove potential initial user prompt)\r\n      const finalFilteredConvo = newConvoFromBackend.filter((line, i) => {\r\n           return !(i === 0 && line.startsWith('User:'));\r\n      });\r\n\r\n      // Check if the process is now final\r\n      if (data.final_problem) {\r\n          setFinalProblemText(data.final_problem); // Store the final problem text\r\n          setIsFinal(true); // Set the final flag\r\n          // No need to setConversation here, as we'll hide it when isFinal is true\r\n      } else {\r\n          // If not final, update the conversation display\r\n          setConversation(finalFilteredConvo);\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error('API call failed:', err);\r\n      // Rollback optimistic update on error only if not final\r\n      if (!isFinal) {\r\n          setConversation(currentConvo);\r\n      }\r\n      setUserResponse(answer); // Put text back in input\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Clean message prefixes and question numbers\r\n  const cleanMessage = (msg, prefixToRemove) => {\r\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\r\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\r\n    return cleaned;\r\n  };\r\n\r\n  // Placeholder for system prompts (replace if needed)\r\n  const feedback = {\r\n      SYSTEM_PROMPT_INITIAL: \"placeholder for initial system prompt text\",\r\n      SYSTEM_PROMPT_NEXT_ITERATION: \"placeholder for next iteration system prompt text\"\r\n  };\r\n\r\n  // Decide if a system message should be displayed\r\n  const shouldDisplaySystemMessage = (msg) => {\r\n    const content = msg.replace('System:', '').trim().toLowerCase();\r\n    const normalizedContent = content.replace(/\\*\\*/g, '');\r\n\r\n    return !(\r\n      content.startsWith('you are ') ||\r\n      content.startsWith('your task is') ||\r\n      content.includes('format 1:') ||\r\n      content.includes('format 2:') ||\r\n      content.includes('decide if you now have enough information') ||\r\n      content.includes('continue the process') ||\r\n      normalizedContent.includes('structure a well-defined business problem statement') ||\r\n      normalizedContent.includes(\"your response should only include the final business problem statement\") ||\r\n      (normalizedContent.includes(\"based on the entire conversation\") && normalizedContent.includes(\"final business problem statement\")) ||\r\n      content === feedback.SYSTEM_PROMPT_INITIAL.toLowerCase() ||\r\n      content === feedback.SYSTEM_PROMPT_NEXT_ITERATION.toLowerCase()\r\n    );\r\n  };\r\n\r\n\r\n  // Main component rendering\r\n  return (\r\n    <div className={styles.conversationPageWrapper}>\r\n      <div className={styles.chatWindow}>\r\n        <div className={styles.header}>\r\n          <h1>Getting On Track...</h1>\r\n        </div>\r\n\r\n        {/* Conditional rendering: Show Final Problem OR Conversation */}\r\n        {isFinal ? (\r\n          // Display Final Problem View\r\n          <div className={styles.finalProblemDisplay}>\r\n            <h2>Final Business Problem:</h2>\r\n            <p className={styles.finalProblemText}>{finalProblemText}</p>\r\n            <div className={styles.savedMessage}>\r\n              <p>This final business problem has been saved for later use.</p>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          // Display Conversation View\r\n          <>\r\n            <div className={styles.conversation}>\r\n              {conversation.map((msg, idx) => {\r\n                if (msg.startsWith('User:')) {\r\n                  return (\r\n                    <div key={idx} className={styles.userBubble}>\r\n                      <p>{cleanMessage(msg, 'User:')}</p>\r\n                    </div>\r\n                  );\r\n                } else if (msg.startsWith('AI:')) {\r\n                  return (\r\n                    <div key={idx} className={styles.aiBubble}>\r\n                      <p>{cleanMessage(msg, 'AI:')}</p>\r\n                    </div>\r\n                  );\r\n                } else if (msg.startsWith('System:')) {\r\n                    if (shouldDisplaySystemMessage(msg)) {\r\n                        return (\r\n                            <div key={idx} className={styles.aiBubble}>\r\n                               <p>{cleanMessage(msg, 'System:')}</p>\r\n                            </div>\r\n                        );\r\n                    }\r\n                }\r\n                return null; // Render nothing for filtered system messages\r\n              })}\r\n              {/* Loading indicator */}\r\n              {isLoading && <div className={styles.loadingIndicator}><p>Thinking...</p></div>}\r\n              {/* Div to scroll to */}\r\n              <div ref={conversationEndRef} />\r\n            </div>\r\n\r\n            {/* Input form (only show if not final) */}\r\n            <form className={styles.responseForm} onSubmit={handleSubmit}>\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Type your answer here...\"\r\n                value={userResponse}\r\n                onChange={e => setUserResponse(e.target.value)}\r\n                required\r\n                disabled={isLoading} // Disable input while loading\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                className={styles.submitButton}\r\n                disabled={isLoading || !userResponse.trim()} // Disable button if loading or input empty\r\n              >\r\n                {isLoading ? 'Sending...' : 'Send'}\r\n              </button>\r\n            </form>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}