{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './conversation_style.module.css';\nimport { callApi } from '../api/client';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Conversation() {\n  _s();\n  const {\n    state\n  } = useLocation(); // Initial state from /api/home via navigation\n  const [conversation, setConversation] = useState([]);\n  const [userResponse, setUserResponse] = useState('');\n  const [isFinal, setIsFinal] = useState(false);\n  const [finalProblemText, setFinalProblemText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [pipelineStatus, setPipelineStatus] = useState('idle'); // idle, conversation, processing_eda, processing_plan, processing_ml, processing_viz_plan, processing_viz, complete, error\n  const [pipelineMessage, setPipelineMessage] = useState(''); // User-facing status message\n  const conversationEndRef = useRef(null);\n\n  // --- Effect 1: Initial Load and Setup ---\n  useEffect(() => {\n    // This effect now primarily sets up state based on what /api/home returned\n    // because /api/home now processes the first turn.\n    const locationState = state;\n    let initialConvo = [];\n    let initialFinalProblem = null;\n    if (locationState) {\n      initialConvo = locationState.conversation || [];\n      initialFinalProblem = locationState.final_problem || null;\n    }\n\n    // Filter out non-display messages if needed (adjust filter as necessary)\n    const filteredConvo = initialConvo.filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && initialConvo.indexOf(msg) === 0));\n    setConversation(filteredConvo);\n    if (initialFinalProblem) {\n      setFinalProblemText(initialFinalProblem);\n      setIsFinal(true);\n      setPipelineStatus('conversation_complete'); // Mark conversation as complete\n    } else if (initialConvo.length > 0) {\n      setPipelineStatus('conversation'); // Mark as in conversation\n    } else {\n      // Handle case where even /api/home failed? Or maybe redirect?\n      setPipelineStatus('error');\n      setPipelineMessage('Failed to initialize conversation.');\n    }\n  }, [state]); // Depend only on state from navigation\n\n  // --- Effect 2: Scroll Conversation ---\n  useEffect(() => {\n    if (pipelineStatus === 'conversation') {\n      var _conversationEndRef$c;\n      // Only scroll during active chat\n      (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [conversation, pipelineStatus]);\n\n  // --- Effect 3: Trigger Pipeline Steps ---\n  useEffect(() => {\n    const runPipelineStep = async step => {\n      let nextStep = '';\n      let success = false;\n      let errorMessage = '';\n      let apiEndpoint = '';\n      let apiMethod = 'POST'; // Most steps are POST\n\n      try {\n        switch (step) {\n          case 'processing_eda':\n            setPipelineMessage('Generating & Running EDA...');\n            apiEndpoint = 'dataanalysis';\n            const edaResult = await callApi(apiEndpoint, apiMethod);\n            success = edaResult.status === 'success'; // Check specific success field if backend provides it\n            if (!success) errorMessage = 'EDA execution failed.'; // Use backend message if available\n            else nextStep = 'processing_plan';\n            break;\n          case 'processing_plan':\n            setPipelineMessage('Generating ML Plan...');\n            apiEndpoint = 'superllm'; // Corrected endpoint name\n            const planResult = await callApi(apiEndpoint, apiMethod);\n            success = planResult.status === 'plan_generated';\n            if (!success) errorMessage = 'ML plan generation failed.';else nextStep = 'processing_ml';\n            break;\n          case 'processing_ml':\n            setPipelineMessage('Generating & Running ML Code...');\n            apiEndpoint = 'ml';\n            const mlResult = await callApi(apiEndpoint, apiMethod);\n            success = mlResult.status === 'success';\n            if (!success) errorMessage = 'ML execution failed.';else nextStep = 'processing_viz_plan';\n            break;\n          case 'processing_viz_plan':\n            setPipelineMessage('Generating Visualization Plan...');\n            apiEndpoint = 'visualizationplanning'; // Corrected endpoint name\n            const vizPlanResult = await callApi(apiEndpoint, apiMethod);\n            success = vizPlanResult.status === 'plan_generated';\n            if (!success) errorMessage = 'Visualization plan generation failed.';else nextStep = 'processing_viz';\n            break;\n          case 'processing_viz':\n            setPipelineMessage('Generating & Running Visualizations...');\n            apiEndpoint = 'visualizations'; // Corrected endpoint name\n            const vizResult = await callApi(apiEndpoint, apiMethod);\n            success = vizResult.status === 'success';\n            if (!success) errorMessage = 'Visualization execution failed.';else nextStep = 'complete'; // Pipeline finished\n            break;\n          default:\n            console.warn(\"Unknown pipeline step:\", step);\n            return;\n          // Should not happen\n        }\n        if (success) {\n          setPipelineStatus(nextStep); // Trigger the next step recursively via useEffect\n        } else {\n          setPipelineStatus('error');\n          setPipelineMessage(`Error during ${step}: ${errorMessage || 'Unknown error'}`);\n        }\n      } catch (err) {\n        console.error(`API call failed for ${step} (${apiEndpoint}):`, err);\n        setPipelineStatus('error');\n        setPipelineMessage(`Error during ${step}: ${err.message || 'Network or API error'}`);\n      }\n    };\n\n    // Trigger the first step when conversation is marked complete\n    if (pipelineStatus === 'conversation_complete') {\n      setPipelineStatus('processing_eda'); // Start the pipeline\n    } else if (pipelineStatus.startsWith('processing_')) {\n      // If status is a processing step, run it\n      runPipelineStep(pipelineStatus);\n    } else if (pipelineStatus === 'complete') {\n      setPipelineMessage('Processing Complete! Visualizations generated.');\n      // Maybe navigate or show results link here\n    }\n  }, [pipelineStatus]); // This effect runs whenever pipelineStatus changes\n\n  // --- Handle User Submission ---\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userResponse.trim() || isLoading || isFinal || pipelineStatus !== 'conversation') return;\n    const answer = userResponse.trim();\n    // Optimistic UI update\n    const updatedConvoUI = [...conversation, `User: ${answer}`];\n    setConversation(updatedConvoUI);\n    setUserResponse('');\n    setIsLoading(true); // Loading specifically for conversation response\n\n    try {\n      const data = await callApi('conversation', 'POST', {\n        user_response: answer\n      });\n      const newConvo = data.conversation || [];\n      const finalFilteredConvo = newConvo.filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && newConvo.indexOf(msg) === 0));\n      setConversation(finalFilteredConvo); // Update with full response\n\n      if (data.final_problem) {\n        setFinalProblemText(data.final_problem);\n        setIsFinal(true); // Mark conversation as finished\n        setPipelineStatus('conversation_complete'); // Set status to trigger pipeline\n      }\n    } catch (err) {\n      console.error('API call failed:', err);\n      // Revert optimistic update on error?\n      setConversation(conversation); // Revert convo\n      setUserResponse(answer); // Put text back\n      setPipelineStatus('error'); // Set error state\n      setPipelineMessage(`Failed to get response: ${err.message || 'API error'}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper to clean messages (minor adjustments maybe needed)\n  const cleanMessage = (msg, prefixToRemove) => {\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\n    // Remove specific patterns if needed\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\n    // Add more cleaning rules if necessary based on LLM output\n    return cleaned;\n  };\n\n  // Filter system messages (adjust based on actual backend prompts)\n  const shouldDisplaySystemMessage = msg => {\n    const content = msg.replace('System:', '').trim().toLowerCase();\n    // Add more specific phrases to hide if needed\n    const hiddenPhrases = [\"you are \", \"your task is\", \"format 1:\", \"format 2:\", \"decide if you now have enough information\", \"continue the process\", \"structure a well-defined business problem statement\", \"your response should only include the final business problem statement\", \"based on the entire conversation.*final business problem statement\",\n    // Simplified check\n    feedback.SYSTEM_PROMPT_INITIAL.toLowerCase(),\n    // Compare against actual constant value if possible\n    feedback.SYSTEM_PROMPT_NEXT_ITERATION.toLowerCase()];\n    // Check if the message content includes any of the phrases to hide\n    return !hiddenPhrases.some(phrase => content.includes(phrase.replace(/\\.\\*/g, ''))); // Basic check\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.conversationPageWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [pipelineStatus === 'conversation' && !isFinal && 'Getting On Track...', isFinal && pipelineStatus !== 'error' && !pipelineStatus.startsWith('processing_') && 'Business Problem Defined', pipelineStatus.startsWith('processing_') && 'Processing Pipeline...', pipelineStatus === 'complete' && 'Processing Complete', pipelineStatus === 'error' && 'Error Occurred']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), isFinal && !pipelineStatus.startsWith('processing_') && pipelineStatus !== 'conversation' ?\n      /*#__PURE__*/\n      // Show final problem only after processing or if error stopped before processing\n      _jsxDEV(\"div\", {\n        className: styles.finalProblemDisplay,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final Business Problem:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.finalProblemText,\n          children: finalProblemText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), pipelineStatus === 'complete' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.pipelineMessage,\n          children: [\"\\u2705 \", pipelineMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }, this), pipelineStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.pipelineMessage} ${styles.errorMessage}`,\n          children: [\"\\u274C \", pipelineMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 17\n        }, this), pipelineStatus === 'conversation_complete' &&\n        /*#__PURE__*/\n        // Before EDA starts\n        _jsxDEV(\"div\", {\n          className: styles.pipelineMessage,\n          children: \"\\u23F3 Preparing next steps...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Show Conversation or Processing steps\n      _jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.conversation,\n          children: [conversation.map((msg, idx) => {\n            // Simplified rendering logic\n            const isUser = msg.startsWith('User:');\n            const isSystem = msg.startsWith('System:');\n            const prefix = isUser ? 'User:' : 'System:'; // Assume AI msgs are marked 'System:' by backend feedback func\n            const bubbleClass = isUser ? styles.userBubble : styles.aiBubble;\n            const cleanedMsg = cleanMessage(msg, prefix);\n\n            // Only render non-empty and (for system) displayable messages\n            if (cleanedMsg && (!isSystem || shouldDisplaySystemMessage(msg))) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: bubbleClass,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: cleanedMsg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 258,\n                  columnNumber: 27\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 25\n              }, this);\n            }\n            return null; // Skip hidden system messages or filedetails lines\n          }), (isLoading || pipelineStatus.startsWith('processing_')) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.loadingIndicator,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: pipelineStatus.startsWith('processing_') ? pipelineMessage : 'Thinking...'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 17\n          }, this), pipelineStatus === 'error' && !isFinal &&\n          /*#__PURE__*/\n          // Show error during conversation phase if it occurs\n          _jsxDEV(\"div\", {\n            className: `${styles.pipelineMessage} ${styles.errorMessage}`,\n            children: [\"\\u274C \", pipelineMessage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: conversationEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this), pipelineStatus === 'conversation' && !isFinal && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: styles.responseForm,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your answer here...\",\n            value: userResponse,\n            onChange: e => setUserResponse(e.target.value),\n            required: true,\n            disabled: isLoading // Disable only during conversation loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: styles.submitButton,\n            disabled: isLoading || !userResponse.trim(),\n            children: isLoading ? 'Sending...' : 'Send'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(Conversation, \"/UXF0K4RY/xRGBLBHn0caeuyd0k=\", false, function () {\n  return [useLocation];\n});\n_c = Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","styles","callApi","jsxDEV","_jsxDEV","Fragment","_Fragment","Conversation","_s","state","conversation","setConversation","userResponse","setUserResponse","isFinal","setIsFinal","finalProblemText","setFinalProblemText","isLoading","setIsLoading","pipelineStatus","setPipelineStatus","pipelineMessage","setPipelineMessage","conversationEndRef","locationState","initialConvo","initialFinalProblem","final_problem","filteredConvo","filter","msg","startsWith","indexOf","length","_conversationEndRef$c","current","scrollIntoView","behavior","runPipelineStep","step","nextStep","success","errorMessage","apiEndpoint","apiMethod","edaResult","status","planResult","mlResult","vizPlanResult","vizResult","console","warn","err","error","message","handleSubmit","e","preventDefault","trim","answer","updatedConvoUI","data","user_response","newConvo","finalFilteredConvo","cleanMessage","prefixToRemove","cleaned","substring","replace","shouldDisplaySystemMessage","content","toLowerCase","hiddenPhrases","feedback","SYSTEM_PROMPT_INITIAL","SYSTEM_PROMPT_NEXT_ITERATION","some","phrase","includes","className","conversationPageWrapper","children","chatWindow","header","fileName","_jsxFileName","lineNumber","columnNumber","finalProblemDisplay","map","idx","isUser","isSystem","prefix","bubbleClass","userBubble","aiBubble","cleanedMsg","loadingIndicator","ref","responseForm","onSubmit","type","placeholder","value","onChange","target","required","disabled","submitButton","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/Conversation.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './conversation_style.module.css';\r\nimport { callApi } from '../api/client';\r\n\r\nexport default function Conversation() {\r\n  const { state } = useLocation(); // Initial state from /api/home via navigation\r\n  const [conversation, setConversation] = useState([]);\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [isFinal, setIsFinal] = useState(false);\r\n  const [finalProblemText, setFinalProblemText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pipelineStatus, setPipelineStatus] = useState('idle'); // idle, conversation, processing_eda, processing_plan, processing_ml, processing_viz_plan, processing_viz, complete, error\r\n  const [pipelineMessage, setPipelineMessage] = useState(''); // User-facing status message\r\n  const conversationEndRef = useRef(null);\r\n\r\n  // --- Effect 1: Initial Load and Setup ---\r\n  useEffect(() => {\r\n    // This effect now primarily sets up state based on what /api/home returned\r\n    // because /api/home now processes the first turn.\r\n    const locationState = state;\r\n    let initialConvo = [];\r\n    let initialFinalProblem = null;\r\n\r\n    if (locationState) {\r\n        initialConvo = locationState.conversation || [];\r\n        initialFinalProblem = locationState.final_problem || null;\r\n    }\r\n\r\n    // Filter out non-display messages if needed (adjust filter as necessary)\r\n    const filteredConvo = initialConvo.filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && initialConvo.indexOf(msg) === 0));\r\n    setConversation(filteredConvo);\r\n\r\n    if (initialFinalProblem) {\r\n        setFinalProblemText(initialFinalProblem);\r\n        setIsFinal(true);\r\n        setPipelineStatus('conversation_complete'); // Mark conversation as complete\r\n    } else if (initialConvo.length > 0) {\r\n        setPipelineStatus('conversation'); // Mark as in conversation\r\n    } else {\r\n        // Handle case where even /api/home failed? Or maybe redirect?\r\n        setPipelineStatus('error');\r\n        setPipelineMessage('Failed to initialize conversation.');\r\n    }\r\n\r\n  }, [state]); // Depend only on state from navigation\r\n\r\n\r\n  // --- Effect 2: Scroll Conversation ---\r\n  useEffect(() => {\r\n    if (pipelineStatus === 'conversation') { // Only scroll during active chat\r\n      conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [conversation, pipelineStatus]);\r\n\r\n\r\n  // --- Effect 3: Trigger Pipeline Steps ---\r\n  useEffect(() => {\r\n    const runPipelineStep = async (step) => {\r\n      let nextStep = '';\r\n      let success = false;\r\n      let errorMessage = '';\r\n      let apiEndpoint = '';\r\n      let apiMethod = 'POST'; // Most steps are POST\r\n\r\n      try {\r\n        switch (step) {\r\n          case 'processing_eda':\r\n            setPipelineMessage('Generating & Running EDA...');\r\n            apiEndpoint = 'dataanalysis';\r\n            const edaResult = await callApi(apiEndpoint, apiMethod);\r\n            success = edaResult.status === 'success'; // Check specific success field if backend provides it\r\n             if (!success) errorMessage = 'EDA execution failed.'; // Use backend message if available\r\n             else nextStep = 'processing_plan';\r\n            break;\r\n\r\n          case 'processing_plan':\r\n             setPipelineMessage('Generating ML Plan...');\r\n             apiEndpoint = 'superllm'; // Corrected endpoint name\r\n             const planResult = await callApi(apiEndpoint, apiMethod);\r\n             success = planResult.status === 'plan_generated';\r\n             if (!success) errorMessage = 'ML plan generation failed.';\r\n             else nextStep = 'processing_ml';\r\n            break;\r\n\r\n          case 'processing_ml':\r\n             setPipelineMessage('Generating & Running ML Code...');\r\n             apiEndpoint = 'ml';\r\n             const mlResult = await callApi(apiEndpoint, apiMethod);\r\n             success = mlResult.status === 'success';\r\n             if (!success) errorMessage = 'ML execution failed.';\r\n             else nextStep = 'processing_viz_plan';\r\n            break;\r\n\r\n          case 'processing_viz_plan':\r\n             setPipelineMessage('Generating Visualization Plan...');\r\n             apiEndpoint = 'visualizationplanning'; // Corrected endpoint name\r\n             const vizPlanResult = await callApi(apiEndpoint, apiMethod);\r\n             success = vizPlanResult.status === 'plan_generated';\r\n             if (!success) errorMessage = 'Visualization plan generation failed.';\r\n             else nextStep = 'processing_viz';\r\n            break;\r\n\r\n          case 'processing_viz':\r\n             setPipelineMessage('Generating & Running Visualizations...');\r\n             apiEndpoint = 'visualizations'; // Corrected endpoint name\r\n             const vizResult = await callApi(apiEndpoint, apiMethod);\r\n             success = vizResult.status === 'success';\r\n             if (!success) errorMessage = 'Visualization execution failed.';\r\n             else nextStep = 'complete'; // Pipeline finished\r\n            break;\r\n\r\n          default:\r\n            console.warn(\"Unknown pipeline step:\", step);\r\n            return; // Should not happen\r\n        }\r\n\r\n        if (success) {\r\n          setPipelineStatus(nextStep); // Trigger the next step recursively via useEffect\r\n        } else {\r\n          setPipelineStatus('error');\r\n          setPipelineMessage(`Error during ${step}: ${errorMessage || 'Unknown error'}`);\r\n        }\r\n\r\n      } catch (err) {\r\n        console.error(`API call failed for ${step} (${apiEndpoint}):`, err);\r\n        setPipelineStatus('error');\r\n        setPipelineMessage(`Error during ${step}: ${err.message || 'Network or API error'}`);\r\n      }\r\n    };\r\n\r\n    // Trigger the first step when conversation is marked complete\r\n    if (pipelineStatus === 'conversation_complete') {\r\n      setPipelineStatus('processing_eda'); // Start the pipeline\r\n    } else if (pipelineStatus.startsWith('processing_')) {\r\n      // If status is a processing step, run it\r\n      runPipelineStep(pipelineStatus);\r\n    } else if (pipelineStatus === 'complete') {\r\n        setPipelineMessage('Processing Complete! Visualizations generated.');\r\n        // Maybe navigate or show results link here\r\n    }\r\n\r\n  }, [pipelineStatus]); // This effect runs whenever pipelineStatus changes\r\n\r\n\r\n  // --- Handle User Submission ---\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userResponse.trim() || isLoading || isFinal || pipelineStatus !== 'conversation') return;\r\n\r\n    const answer = userResponse.trim();\r\n    // Optimistic UI update\r\n    const updatedConvoUI = [...conversation, `User: ${answer}`];\r\n    setConversation(updatedConvoUI);\r\n    setUserResponse('');\r\n    setIsLoading(true); // Loading specifically for conversation response\r\n\r\n    try {\r\n      const data = await callApi('conversation', 'POST', { user_response: answer });\r\n\r\n      const newConvo = data.conversation || [];\r\n      const finalFilteredConvo = newConvo.filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && newConvo.indexOf(msg) === 0));\r\n\r\n      setConversation(finalFilteredConvo); // Update with full response\r\n\r\n      if (data.final_problem) {\r\n        setFinalProblemText(data.final_problem);\r\n        setIsFinal(true); // Mark conversation as finished\r\n        setPipelineStatus('conversation_complete'); // Set status to trigger pipeline\r\n      }\r\n    } catch (err) {\r\n      console.error('API call failed:', err);\r\n      // Revert optimistic update on error?\r\n      setConversation(conversation); // Revert convo\r\n      setUserResponse(answer); // Put text back\r\n      setPipelineStatus('error'); // Set error state\r\n      setPipelineMessage(`Failed to get response: ${err.message || 'API error'}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper to clean messages (minor adjustments maybe needed)\r\n  const cleanMessage = (msg, prefixToRemove) => {\r\n    let cleaned = msg.startsWith(prefixToRemove)\r\n      ? msg.substring(prefixToRemove.length).trim()\r\n      : msg.trim();\r\n    // Remove specific patterns if needed\r\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\r\n    // Add more cleaning rules if necessary based on LLM output\r\n    return cleaned;\r\n  };\r\n\r\n  // Filter system messages (adjust based on actual backend prompts)\r\n  const shouldDisplaySystemMessage = (msg) => {\r\n    const content = msg.replace('System:', '').trim().toLowerCase();\r\n    // Add more specific phrases to hide if needed\r\n    const hiddenPhrases = [\r\n        \"you are \", \"your task is\", \"format 1:\", \"format 2:\",\r\n        \"decide if you now have enough information\", \"continue the process\",\r\n        \"structure a well-defined business problem statement\",\r\n        \"your response should only include the final business problem statement\",\r\n        \"based on the entire conversation.*final business problem statement\", // Simplified check\r\n        feedback.SYSTEM_PROMPT_INITIAL.toLowerCase(), // Compare against actual constant value if possible\r\n        feedback.SYSTEM_PROMPT_NEXT_ITERATION.toLowerCase()\r\n    ];\r\n    // Check if the message content includes any of the phrases to hide\r\n    return !hiddenPhrases.some(phrase => content.includes(phrase.replace(/\\.\\*/g, ''))); // Basic check\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={styles.conversationPageWrapper}>\r\n      <div className={styles.chatWindow}>\r\n        <div className={styles.header}>\r\n          {/* Update header based on status */}\r\n          <h1>\r\n            {pipelineStatus === 'conversation' && !isFinal && 'Getting On Track...'}\r\n            {isFinal && pipelineStatus !== 'error' && !pipelineStatus.startsWith('processing_') && 'Business Problem Defined'}\r\n            {pipelineStatus.startsWith('processing_') && 'Processing Pipeline...'}\r\n            {pipelineStatus === 'complete' && 'Processing Complete'}\r\n            {pipelineStatus === 'error' && 'Error Occurred'}\r\n          </h1>\r\n        </div>\r\n\r\n        {/* Display Final Problem OR Conversation/Processing Status */}\r\n        {isFinal && !pipelineStatus.startsWith('processing_') && pipelineStatus !== 'conversation' ? (\r\n          // Show final problem only after processing or if error stopped before processing\r\n          <div className={styles.finalProblemDisplay}>\r\n            <h2>Final Business Problem:</h2>\r\n            <p className={styles.finalProblemText}>{finalProblemText}</p>\r\n            {pipelineStatus === 'complete' && (\r\n                <div className={styles.pipelineMessage}>✅ {pipelineMessage}</div>\r\n            )}\r\n             {pipelineStatus === 'error' && (\r\n                <div className={`${styles.pipelineMessage} ${styles.errorMessage}`}>❌ {pipelineMessage}</div>\r\n            )}\r\n             {pipelineStatus === 'conversation_complete' && ( // Before EDA starts\r\n                <div className={styles.pipelineMessage}>⏳ Preparing next steps...</div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          // Show Conversation or Processing steps\r\n          <>\r\n            <div className={styles.conversation}>\r\n              {conversation.map((msg, idx) => {\r\n                 // Simplified rendering logic\r\n                 const isUser = msg.startsWith('User:');\r\n                 const isSystem = msg.startsWith('System:');\r\n                 const prefix = isUser ? 'User:' : 'System:'; // Assume AI msgs are marked 'System:' by backend feedback func\r\n                 const bubbleClass = isUser ? styles.userBubble : styles.aiBubble;\r\n                 const cleanedMsg = cleanMessage(msg, prefix);\r\n\r\n                 // Only render non-empty and (for system) displayable messages\r\n                 if (cleanedMsg && (!isSystem || shouldDisplaySystemMessage(msg))) {\r\n                     return (\r\n                        <div key={idx} className={bubbleClass}>\r\n                          <p>{cleanedMsg}</p>\r\n                        </div>\r\n                     );\r\n                 }\r\n                 return null; // Skip hidden system messages or filedetails lines\r\n              })}\r\n\r\n              {/* Show loading during conversation turn OR pipeline processing */}\r\n              {(isLoading || pipelineStatus.startsWith('processing_')) && (\r\n                <div className={styles.loadingIndicator}>\r\n                  <p>{pipelineStatus.startsWith('processing_') ? pipelineMessage : 'Thinking...'}</p>\r\n                </div>\r\n              )}\r\n               {pipelineStatus === 'error' && !isFinal && ( // Show error during conversation phase if it occurs\r\n                  <div className={`${styles.pipelineMessage} ${styles.errorMessage}`}>❌ {pipelineMessage}</div>\r\n              )}\r\n              <div ref={conversationEndRef} />\r\n            </div>\r\n\r\n            {/* Show input form only during active conversation */}\r\n            {pipelineStatus === 'conversation' && !isFinal && (\r\n              <form className={styles.responseForm} onSubmit={handleSubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Type your answer here...\"\r\n                  value={userResponse}\r\n                  onChange={e => setUserResponse(e.target.value)}\r\n                  required\r\n                  disabled={isLoading} // Disable only during conversation loading\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className={styles.submitButton}\r\n                  disabled={isLoading || !userResponse.trim()}\r\n                >\r\n                  {isLoading ? 'Sending...' : 'Send'}\r\n                </button>\r\n              </form>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,iCAAiC;AACpD,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAM,CAAC,GAAGT,WAAW,CAAC,CAAC,CAAC,CAAC;EACjC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACuB,eAAe,EAAEC,kBAAkB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5D,MAAMyB,kBAAkB,GAAG1B,MAAM,CAAC,IAAI,CAAC;;EAEvC;EACAD,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAM4B,aAAa,GAAGhB,KAAK;IAC3B,IAAIiB,YAAY,GAAG,EAAE;IACrB,IAAIC,mBAAmB,GAAG,IAAI;IAE9B,IAAIF,aAAa,EAAE;MACfC,YAAY,GAAGD,aAAa,CAACf,YAAY,IAAI,EAAE;MAC/CiB,mBAAmB,GAAGF,aAAa,CAACG,aAAa,IAAI,IAAI;IAC7D;;IAEA;IACA,MAAMC,aAAa,GAAGH,YAAY,CAACI,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC,IAAI,EAAED,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,IAAIN,YAAY,CAACO,OAAO,CAACF,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IAClJpB,eAAe,CAACkB,aAAa,CAAC;IAE9B,IAAIF,mBAAmB,EAAE;MACrBV,mBAAmB,CAACU,mBAAmB,CAAC;MACxCZ,UAAU,CAAC,IAAI,CAAC;MAChBM,iBAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIK,YAAY,CAACQ,MAAM,GAAG,CAAC,EAAE;MAChCb,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACH;MACAA,iBAAiB,CAAC,OAAO,CAAC;MAC1BE,kBAAkB,CAAC,oCAAoC,CAAC;IAC5D;EAEF,CAAC,EAAE,CAACd,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGb;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIuB,cAAc,KAAK,cAAc,EAAE;MAAA,IAAAe,qBAAA;MAAE;MACvC,CAAAA,qBAAA,GAAAX,kBAAkB,CAACY,OAAO,cAAAD,qBAAA,uBAA1BA,qBAAA,CAA4BE,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACpE;EACF,CAAC,EAAE,CAAC5B,YAAY,EAAEU,cAAc,CAAC,CAAC;;EAGlC;EACAvB,SAAS,CAAC,MAAM;IACd,MAAM0C,eAAe,GAAG,MAAOC,IAAI,IAAK;MACtC,IAAIC,QAAQ,GAAG,EAAE;MACjB,IAAIC,OAAO,GAAG,KAAK;MACnB,IAAIC,YAAY,GAAG,EAAE;MACrB,IAAIC,WAAW,GAAG,EAAE;MACpB,IAAIC,SAAS,GAAG,MAAM,CAAC,CAAC;;MAExB,IAAI;QACF,QAAQL,IAAI;UACV,KAAK,gBAAgB;YACnBjB,kBAAkB,CAAC,6BAA6B,CAAC;YACjDqB,WAAW,GAAG,cAAc;YAC5B,MAAME,SAAS,GAAG,MAAM5C,OAAO,CAAC0C,WAAW,EAAEC,SAAS,CAAC;YACvDH,OAAO,GAAGI,SAAS,CAACC,MAAM,KAAK,SAAS,CAAC,CAAC;YACzC,IAAI,CAACL,OAAO,EAAEC,YAAY,GAAG,uBAAuB,CAAC,CAAC;YAAA,KACjDF,QAAQ,GAAG,iBAAiB;YAClC;UAEF,KAAK,iBAAiB;YACnBlB,kBAAkB,CAAC,uBAAuB,CAAC;YAC3CqB,WAAW,GAAG,UAAU,CAAC,CAAC;YAC1B,MAAMI,UAAU,GAAG,MAAM9C,OAAO,CAAC0C,WAAW,EAAEC,SAAS,CAAC;YACxDH,OAAO,GAAGM,UAAU,CAACD,MAAM,KAAK,gBAAgB;YAChD,IAAI,CAACL,OAAO,EAAEC,YAAY,GAAG,4BAA4B,CAAC,KACrDF,QAAQ,GAAG,eAAe;YAChC;UAEF,KAAK,eAAe;YACjBlB,kBAAkB,CAAC,iCAAiC,CAAC;YACrDqB,WAAW,GAAG,IAAI;YAClB,MAAMK,QAAQ,GAAG,MAAM/C,OAAO,CAAC0C,WAAW,EAAEC,SAAS,CAAC;YACtDH,OAAO,GAAGO,QAAQ,CAACF,MAAM,KAAK,SAAS;YACvC,IAAI,CAACL,OAAO,EAAEC,YAAY,GAAG,sBAAsB,CAAC,KAC/CF,QAAQ,GAAG,qBAAqB;YACtC;UAEF,KAAK,qBAAqB;YACvBlB,kBAAkB,CAAC,kCAAkC,CAAC;YACtDqB,WAAW,GAAG,uBAAuB,CAAC,CAAC;YACvC,MAAMM,aAAa,GAAG,MAAMhD,OAAO,CAAC0C,WAAW,EAAEC,SAAS,CAAC;YAC3DH,OAAO,GAAGQ,aAAa,CAACH,MAAM,KAAK,gBAAgB;YACnD,IAAI,CAACL,OAAO,EAAEC,YAAY,GAAG,uCAAuC,CAAC,KAChEF,QAAQ,GAAG,gBAAgB;YACjC;UAEF,KAAK,gBAAgB;YAClBlB,kBAAkB,CAAC,wCAAwC,CAAC;YAC5DqB,WAAW,GAAG,gBAAgB,CAAC,CAAC;YAChC,MAAMO,SAAS,GAAG,MAAMjD,OAAO,CAAC0C,WAAW,EAAEC,SAAS,CAAC;YACvDH,OAAO,GAAGS,SAAS,CAACJ,MAAM,KAAK,SAAS;YACxC,IAAI,CAACL,OAAO,EAAEC,YAAY,GAAG,iCAAiC,CAAC,KAC1DF,QAAQ,GAAG,UAAU,CAAC,CAAC;YAC7B;UAEF;YACEW,OAAO,CAACC,IAAI,CAAC,wBAAwB,EAAEb,IAAI,CAAC;YAC5C;UAAQ;QACZ;QAEA,IAAIE,OAAO,EAAE;UACXrB,iBAAiB,CAACoB,QAAQ,CAAC,CAAC,CAAC;QAC/B,CAAC,MAAM;UACLpB,iBAAiB,CAAC,OAAO,CAAC;UAC1BE,kBAAkB,CAAC,gBAAgBiB,IAAI,KAAKG,YAAY,IAAI,eAAe,EAAE,CAAC;QAChF;MAEF,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZF,OAAO,CAACG,KAAK,CAAC,uBAAuBf,IAAI,KAAKI,WAAW,IAAI,EAAEU,GAAG,CAAC;QACnEjC,iBAAiB,CAAC,OAAO,CAAC;QAC1BE,kBAAkB,CAAC,gBAAgBiB,IAAI,KAAKc,GAAG,CAACE,OAAO,IAAI,sBAAsB,EAAE,CAAC;MACtF;IACF,CAAC;;IAED;IACA,IAAIpC,cAAc,KAAK,uBAAuB,EAAE;MAC9CC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM,IAAID,cAAc,CAACY,UAAU,CAAC,aAAa,CAAC,EAAE;MACnD;MACAO,eAAe,CAACnB,cAAc,CAAC;IACjC,CAAC,MAAM,IAAIA,cAAc,KAAK,UAAU,EAAE;MACtCG,kBAAkB,CAAC,gDAAgD,CAAC;MACpE;IACJ;EAEF,CAAC,EAAE,CAACH,cAAc,CAAC,CAAC,CAAC,CAAC;;EAGtB;EACA,MAAMqC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI,CAAC/C,YAAY,CAACgD,IAAI,CAAC,CAAC,IAAI1C,SAAS,IAAIJ,OAAO,IAAIM,cAAc,KAAK,cAAc,EAAE;IAEvF,MAAMyC,MAAM,GAAGjD,YAAY,CAACgD,IAAI,CAAC,CAAC;IAClC;IACA,MAAME,cAAc,GAAG,CAAC,GAAGpD,YAAY,EAAE,SAASmD,MAAM,EAAE,CAAC;IAC3DlD,eAAe,CAACmD,cAAc,CAAC;IAC/BjD,eAAe,CAAC,EAAE,CAAC;IACnBM,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpB,IAAI;MACF,MAAM4C,IAAI,GAAG,MAAM7D,OAAO,CAAC,cAAc,EAAE,MAAM,EAAE;QAAE8D,aAAa,EAAEH;MAAO,CAAC,CAAC;MAE7E,MAAMI,QAAQ,GAAGF,IAAI,CAACrD,YAAY,IAAI,EAAE;MACxC,MAAMwD,kBAAkB,GAAGD,QAAQ,CAACnC,MAAM,CAACC,GAAG,IAAI,CAACA,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC,IAAI,EAAED,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,IAAIiC,QAAQ,CAAChC,OAAO,CAACF,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;MAE/IpB,eAAe,CAACuD,kBAAkB,CAAC,CAAC,CAAC;;MAErC,IAAIH,IAAI,CAACnC,aAAa,EAAE;QACtBX,mBAAmB,CAAC8C,IAAI,CAACnC,aAAa,CAAC;QACvCb,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAClBM,iBAAiB,CAAC,uBAAuB,CAAC,CAAC,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOiC,GAAG,EAAE;MACZF,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAED,GAAG,CAAC;MACtC;MACA3C,eAAe,CAACD,YAAY,CAAC,CAAC,CAAC;MAC/BG,eAAe,CAACgD,MAAM,CAAC,CAAC,CAAC;MACzBxC,iBAAiB,CAAC,OAAO,CAAC,CAAC,CAAC;MAC5BE,kBAAkB,CAAC,2BAA2B+B,GAAG,CAACE,OAAO,IAAI,WAAW,EAAE,CAAC;IAC7E,CAAC,SAAS;MACRrC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMgD,YAAY,GAAGA,CAACpC,GAAG,EAAEqC,cAAc,KAAK;IAC5C,IAAIC,OAAO,GAAGtC,GAAG,CAACC,UAAU,CAACoC,cAAc,CAAC,GACxCrC,GAAG,CAACuC,SAAS,CAACF,cAAc,CAAClC,MAAM,CAAC,CAAC0B,IAAI,CAAC,CAAC,GAC3C7B,GAAG,CAAC6B,IAAI,CAAC,CAAC;IACd;IACAS,OAAO,GAAGA,OAAO,CAACE,OAAO,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAACX,IAAI,CAAC,CAAC;IAC7D;IACA,OAAOS,OAAO;EAChB,CAAC;;EAED;EACA,MAAMG,0BAA0B,GAAIzC,GAAG,IAAK;IAC1C,MAAM0C,OAAO,GAAG1C,GAAG,CAACwC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACX,IAAI,CAAC,CAAC,CAACc,WAAW,CAAC,CAAC;IAC/D;IACA,MAAMC,aAAa,GAAG,CAClB,UAAU,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EACpD,2CAA2C,EAAE,sBAAsB,EACnE,qDAAqD,EACrD,wEAAwE,EACxE,oEAAoE;IAAE;IACtEC,QAAQ,CAACC,qBAAqB,CAACH,WAAW,CAAC,CAAC;IAAE;IAC9CE,QAAQ,CAACE,4BAA4B,CAACJ,WAAW,CAAC,CAAC,CACtD;IACD;IACA,OAAO,CAACC,aAAa,CAACI,IAAI,CAACC,MAAM,IAAIP,OAAO,CAACQ,QAAQ,CAACD,MAAM,CAACT,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACvF,CAAC;EAGD,oBACEnE,OAAA;IAAK8E,SAAS,EAAEjF,MAAM,CAACkF,uBAAwB;IAAAC,QAAA,eAC7ChF,OAAA;MAAK8E,SAAS,EAAEjF,MAAM,CAACoF,UAAW;MAAAD,QAAA,gBAChChF,OAAA;QAAK8E,SAAS,EAAEjF,MAAM,CAACqF,MAAO;QAAAF,QAAA,eAE5BhF,OAAA;UAAAgF,QAAA,GACGhE,cAAc,KAAK,cAAc,IAAI,CAACN,OAAO,IAAI,qBAAqB,EACtEA,OAAO,IAAIM,cAAc,KAAK,OAAO,IAAI,CAACA,cAAc,CAACY,UAAU,CAAC,aAAa,CAAC,IAAI,0BAA0B,EAChHZ,cAAc,CAACY,UAAU,CAAC,aAAa,CAAC,IAAI,wBAAwB,EACpEZ,cAAc,KAAK,UAAU,IAAI,qBAAqB,EACtDA,cAAc,KAAK,OAAO,IAAI,gBAAgB;QAAA;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,EAGL5E,OAAO,IAAI,CAACM,cAAc,CAACY,UAAU,CAAC,aAAa,CAAC,IAAIZ,cAAc,KAAK,cAAc;MAAA;MACxF;MACAhB,OAAA;QAAK8E,SAAS,EAAEjF,MAAM,CAAC0F,mBAAoB;QAAAP,QAAA,gBACzChF,OAAA;UAAAgF,QAAA,EAAI;QAAuB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChCtF,OAAA;UAAG8E,SAAS,EAAEjF,MAAM,CAACe,gBAAiB;UAAAoE,QAAA,EAAEpE;QAAgB;UAAAuE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EAC5DtE,cAAc,KAAK,UAAU,iBAC1BhB,OAAA;UAAK8E,SAAS,EAAEjF,MAAM,CAACqB,eAAgB;UAAA8D,QAAA,GAAC,SAAE,EAAC9D,eAAe;QAAA;UAAAiE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CACnE,EACCtE,cAAc,KAAK,OAAO,iBACxBhB,OAAA;UAAK8E,SAAS,EAAE,GAAGjF,MAAM,CAACqB,eAAe,IAAIrB,MAAM,CAAC0C,YAAY,EAAG;UAAAyC,QAAA,GAAC,SAAE,EAAC9D,eAAe;QAAA;UAAAiE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAC/F,EACCtE,cAAc,KAAK,uBAAuB;QAAA;QAAM;QAC9ChB,OAAA;UAAK8E,SAAS,EAAEjF,MAAM,CAACqB,eAAgB;UAAA8D,QAAA,EAAC;QAAyB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CACzE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;MAAA;MAEN;MACAtF,OAAA,CAAAE,SAAA;QAAA8E,QAAA,gBACEhF,OAAA;UAAK8E,SAAS,EAAEjF,MAAM,CAACS,YAAa;UAAA0E,QAAA,GACjC1E,YAAY,CAACkF,GAAG,CAAC,CAAC7D,GAAG,EAAE8D,GAAG,KAAK;YAC7B;YACA,MAAMC,MAAM,GAAG/D,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC;YACtC,MAAM+D,QAAQ,GAAGhE,GAAG,CAACC,UAAU,CAAC,SAAS,CAAC;YAC1C,MAAMgE,MAAM,GAAGF,MAAM,GAAG,OAAO,GAAG,SAAS,CAAC,CAAC;YAC7C,MAAMG,WAAW,GAAGH,MAAM,GAAG7F,MAAM,CAACiG,UAAU,GAAGjG,MAAM,CAACkG,QAAQ;YAChE,MAAMC,UAAU,GAAGjC,YAAY,CAACpC,GAAG,EAAEiE,MAAM,CAAC;;YAE5C;YACA,IAAII,UAAU,KAAK,CAACL,QAAQ,IAAIvB,0BAA0B,CAACzC,GAAG,CAAC,CAAC,EAAE;cAC9D,oBACG3B,OAAA;gBAAe8E,SAAS,EAAEe,WAAY;gBAAAb,QAAA,eACpChF,OAAA;kBAAAgF,QAAA,EAAIgB;gBAAU;kBAAAb,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI;cAAC,GADXG,GAAG;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAER,CAAC;YAEb;YACA,OAAO,IAAI,CAAC,CAAC;UAChB,CAAC,CAAC,EAGD,CAACxE,SAAS,IAAIE,cAAc,CAACY,UAAU,CAAC,aAAa,CAAC,kBACrD5B,OAAA;YAAK8E,SAAS,EAAEjF,MAAM,CAACoG,gBAAiB;YAAAjB,QAAA,eACtChF,OAAA;cAAAgF,QAAA,EAAIhE,cAAc,CAACY,UAAU,CAAC,aAAa,CAAC,GAAGV,eAAe,GAAG;YAAa;cAAAiE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChF,CACN,EACCtE,cAAc,KAAK,OAAO,IAAI,CAACN,OAAO;UAAA;UAAM;UAC1CV,OAAA;YAAK8E,SAAS,EAAE,GAAGjF,MAAM,CAACqB,eAAe,IAAIrB,MAAM,CAAC0C,YAAY,EAAG;YAAAyC,QAAA,GAAC,SAAE,EAAC9D,eAAe;UAAA;YAAAiE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAC/F,eACDtF,OAAA;YAAKkG,GAAG,EAAE9E;UAAmB;YAAA+D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC7B,CAAC,EAGLtE,cAAc,KAAK,cAAc,IAAI,CAACN,OAAO,iBAC5CV,OAAA;UAAM8E,SAAS,EAAEjF,MAAM,CAACsG,YAAa;UAACC,QAAQ,EAAE/C,YAAa;UAAA2B,QAAA,gBAC3DhF,OAAA;YACEqG,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,0BAA0B;YACtCC,KAAK,EAAE/F,YAAa;YACpBgG,QAAQ,EAAElD,CAAC,IAAI7C,eAAe,CAAC6C,CAAC,CAACmD,MAAM,CAACF,KAAK,CAAE;YAC/CG,QAAQ;YACRC,QAAQ,EAAE7F,SAAU,CAAC;UAAA;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB,CAAC,eACFtF,OAAA;YACEqG,IAAI,EAAC,QAAQ;YACbvB,SAAS,EAAEjF,MAAM,CAAC+G,YAAa;YAC/BD,QAAQ,EAAE7F,SAAS,IAAI,CAACN,YAAY,CAACgD,IAAI,CAAC,CAAE;YAAAwB,QAAA,EAE3ClE,SAAS,GAAG,YAAY,GAAG;UAAM;YAAAqE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CACP;MAAA,eACD,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClF,EAAA,CAxSuBD,YAAY;EAAA,QAChBP,WAAW;AAAA;AAAAiH,EAAA,GADP1G,YAAY;AAAA,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}