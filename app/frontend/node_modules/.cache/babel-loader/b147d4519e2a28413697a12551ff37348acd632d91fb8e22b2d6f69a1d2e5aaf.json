{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\dashboard.js\",\n  _s = $RefreshSig$();\n// dashboard.js\nimport React, { useEffect, useState } from 'react';\nimport styles from './dashboard-react.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vizpath = '/app/visualizations/';\nconst jsonUrl = '/app/frontend/public/data/plot_explanations.json';\nexport default function Dashboard() {\n  _s();\n  const [explanations, setExplanations] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    fetch(jsonUrl).then(res => {\n      if (!res.ok) throw new Error(`HTTP ${res.status} – ${res.statusText}`);\n      return res.json();\n    }).then(data => {\n      setExplanations(data);\n      setLoading(false);\n    }).catch(err => {\n      console.error('Failed to load explanations JSON:', err);\n      setError('Unable to load plot explanations.');\n      setLoading(false);\n    });\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.loading,\n      children: \"Loading visualizations\\u2026\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n  const entries = Object.entries(explanations || {});\n  if (entries.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.loading,\n      children: \"No explanations found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.grid,\n      children: entries.map(([filename, explanation]) => {\n        const imgSrc = `${vizpath}${filename}`;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.card,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: imgSrc,\n            alt: filename,\n            className: styles.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.explanation,\n            children: explanation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this)]\n        }, filename, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"pWvJJrvYaiwqYVMWp1XV4upBK34=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","styles","jsxDEV","_jsxDEV","vizpath","jsonUrl","Dashboard","_s","explanations","setExplanations","loading","setLoading","error","setError","fetch","then","res","ok","Error","status","statusText","json","data","catch","err","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","Object","length","container","grid","map","filename","explanation","imgSrc","card","src","alt","image","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/dashboard.js"],"sourcesContent":["// dashboard.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport styles from './dashboard-react.module.css';\r\n\r\nconst vizpath = '/app/visualizations/';\r\nconst jsonUrl = '/app/frontend/public/data/plot_explanations.json';\r\n\r\nexport default function Dashboard() {\r\n  const [explanations, setExplanations] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch(jsonUrl)\r\n      .then(res => {\r\n        if (!res.ok) throw new Error(`HTTP ${res.status} – ${res.statusText}`);\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        setExplanations(data);\r\n        setLoading(false);\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to load explanations JSON:', err);\r\n        setError('Unable to load plot explanations.');\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <p className={styles.loading}>Loading visualizations…</p>;\r\n  }\r\n\r\n  if (error) {\r\n    return <p className={styles.error}>{error}</p>;\r\n  }\r\n\r\n  const entries = Object.entries(explanations || {});\r\n  if (entries.length === 0) {\r\n    return <p className={styles.loading}>No explanations found.</p>;\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.grid}>\r\n        {entries.map(([filename, explanation]) => {\r\n          const imgSrc = `${vizpath}${filename}`;\r\n          return (\r\n            <div key={filename} className={styles.card}>\r\n              <img\r\n                src={imgSrc}\r\n                alt={filename}\r\n                className={styles.image}\r\n              />\r\n              <div className={styles.explanation}>\r\n                {explanation}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}