{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './conversation_style.module.css';\nimport { callApi } from '../api/client'; // Ensure this points to your API client function\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BACKEND_SYSTEM_PROMPT_INITIAL_CORE = `\nYou are an AI assisting with business problem definition.\nThe user will provide a brief business problem statement.\nYour task is to:\n1. Analyze the user's problem statement.\n2. Decide if you need more information to understand the problem deeply enough to formulate a well-defined business problem statement.\n3. If you need more information, ask ONE clarifying question.  The question should be specific and help you understand a crucial aspect of the problem.\n4. If you believe you have enough information to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it. Do not ask a question in this case.\nYour response should follow one of these formats:\nFormat 1: Asking a Clarifying Question (if more info needed):\n<Your clarifying question>\nFormat 2: Ready to formulate problem (if enough info):\nReady to formulate problem.  (Your response MUST START with this EXACT phrase)\nExample:\nWhat specific metrics are you currently tracking to measure this problem?\nStart the process now.\n`.trim().toLowerCase();\nconst BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE = `\nYou are continuing to assist with business problem definition.\nThe user has responded to your previous question.\nYour task is to:\n1. Review the entire conversation so far, including the initial problem statement and the user's responses to your questions.\n2. Decide if you now have enough information to formulate a well-defined business problem statement.\n3. If you still need more information, ask ONE more clarifying question.\n4. If you believe you have enough information NOW to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it.\nYour response should follow one of these formats:\nFormat 1: Asking a Clarifying Question:\n<Your clarifying question>\nFormat 2: Ready to formulate problem:\nReady to formulate problem. (Your response MUST START with this EXACT phrase)\nContinue the process.\n`.trim().toLowerCase();\nexport default function Conversation() {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const [conversation, setConversation] = useState([]);\n  const [userResponse, setUserResponse] = useState('');\n  const [isFinal, setIsFinal] = useState(false);\n  const [finalProblemText, setFinalProblemText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  // Updated Pipeline Status states reflecting the new order\n  const [pipelineStatus, setPipelineStatus] = useState('idle'); // idle, initializing, conversation, conversation_complete, processing_plan, processing_eda, processing_ml, processing_viz_plan, processing_viz, complete, error\n  const [pipelineMessage, setPipelineMessage] = useState('');\n  const conversationEndRef = useRef(null);\n  const processAndSetConversation = (convoData, finalProblemData) => {\n    const filteredConvo = (convoData || []).filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && (convoData || []).indexOf(msg) === 0));\n    setConversation(filteredConvo);\n    if (finalProblemData) {\n      setFinalProblemText(finalProblemData);\n      setIsFinal(true);\n      setPipelineStatus('conversation_complete');\n    } else if (filteredConvo.length > 0) {\n      setPipelineStatus('conversation');\n    } else {\n      setPipelineStatus('error');\n      setPipelineMessage('Conversation initialization failed or empty.');\n    }\n  };\n  useEffect(() => {\n    const locationState = state;\n    let initialConvoFromState = [];\n    let initialFinalProblemFromState = null;\n    if (locationState) {\n      initialConvoFromState = locationState.conversation || [];\n      initialFinalProblemFromState = locationState.final_problem || null;\n    }\n    setIsLoading(true);\n    setPipelineStatus('initializing');\n    setPipelineMessage('Initializing conversation...');\n    if (initialFinalProblemFromState) {\n      processAndSetConversation(initialConvoFromState, initialFinalProblemFromState);\n      setIsLoading(false);\n      setPipelineMessage('');\n    } else {\n      callApi('conversation', 'GET').then(data => {\n        if (data && data.conversation) {\n          processAndSetConversation(data.conversation, data.final_problem);\n        } else {\n          console.error(\"GET /api/conversation response missing data:\", data);\n          setPipelineStatus('error');\n          setPipelineMessage('Failed to get initial conversation state from server.');\n        }\n      }).catch(err => {\n        console.error(\"Initial GET /api/conversation failed:\", err);\n        setPipelineStatus('error');\n        setPipelineMessage(`Failed to connect: ${err.message || 'Network error'}`);\n      }).finally(() => {\n        setIsLoading(false);\n        if (pipelineStatus !== 'error') {\n          setPipelineMessage('');\n        }\n      });\n    }\n  }, [state]); // Removed processAndSetConversation from deps\n\n  useEffect(() => {\n    if (pipelineStatus === 'conversation' || pipelineStatus === 'initializing') {\n      var _conversationEndRef$c;\n      (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [conversation, pipelineStatus, isLoading]);\n\n  // --- Effect 3: Trigger Pipeline Steps (Updated Order) ---\n  useEffect(() => {\n    const runPipelineStep = async step => {\n      var _resultData, _resultData2, _resultData3, _resultData4, _resultData5, _resultData6, _resultData7, _resultData8;\n      let nextStep = '';\n      let success = false;\n      let errorMessage = '';\n      let apiEndpoint = '';\n      let apiMethod = 'POST';\n      let resultData = null;\n      setIsLoading(true);\n      try {\n        switch (step) {\n          // --- Step 1: Generate Unified Plan (SuperLLM) ---\n          case 'processing_plan':\n            setPipelineMessage('Generating Unified Analysis & ML Plan...');\n            apiEndpoint = 'superllm'; // Call the endpoint that triggers the planner\n            resultData = await callApi(apiEndpoint, apiMethod);\n            // Adjust success check based on actual backend response\n            success = ((_resultData = resultData) === null || _resultData === void 0 ? void 0 : _resultData.status) === 'plan_generated' || ((_resultData2 = resultData) === null || _resultData2 === void 0 ? void 0 : _resultData2.status) === 'ml_plan_exists'; // Allow checking existing plan too\n            if (!success) errorMessage = ((_resultData3 = resultData) === null || _resultData3 === void 0 ? void 0 : _resultData3.error) || ((_resultData4 = resultData) === null || _resultData4 === void 0 ? void 0 : _resultData4.details) || 'Unified plan generation failed.';else nextStep = 'processing_eda'; // Next step is EDA\n            break;\n\n          // --- Step 2: Run EDA (Guided by Plan) ---\n          case 'processing_eda':\n            setPipelineMessage('Generating & Running Guided EDA...');\n            apiEndpoint = 'dataanalysis';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            success = ((_resultData5 = resultData) === null || _resultData5 === void 0 ? void 0 : _resultData5.status) === 'success';\n            if (!success) errorMessage = ((_resultData6 = resultData) === null || _resultData6 === void 0 ? void 0 : _resultData6.error) || ((_resultData7 = resultData) === null || _resultData7 === void 0 ? void 0 : _resultData7.details) || 'Guided EDA execution failed.';else nextStep = 'processing_ml'; // Next step is ML\n            break;\n\n          // --- Step 3: Run ML (Based on Plan & EDA Output) ---\n          case 'processing_ml':\n            setPipelineMessage('Generating & Running ML Code...');\n            apiEndpoint = 'ml';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            success = ((_resultData8 = resultData) === null || _resultData8 === void 0 ? void 0 : _resultData8.status) === 'success';\n            if (!success) {\n              var _resultData9, _resultData10;\n              errorMessage = ((_resultData9 = resultData) === null || _resultData9 === void 0 ? void 0 : _resultData9.error) || ((_resultData10 = resultData) === null || _resultData10 === void 0 ? void 0 : _resultData10.details) || 'ML execution failed.';\n            } else {\n              // Call VLM right after ML success\n              setPipelineMessage('Generating Visualisations...');\n              try {\n                const vlmResult = await callApi('vlm', 'POST');\n                success = (vlmResult === null || vlmResult === void 0 ? void 0 : vlmResult.status) === 'success';\n                if (!success) {\n                  console.warn('VLM generated warnings:', vlmResult === null || vlmResult === void 0 ? void 0 : vlmResult.error);\n                }\n              } catch (vlmError) {\n                console.error('VLM processing error:', vlmError);\n              }\n              nextStep = 'complete'; // Skip visualization steps, go directly to complete\n            }\n            break;\n          default:\n            console.warn(\"Unknown pipeline step:\", step);\n            setIsLoading(false);\n            return;\n        }\n        if (success) {\n          setPipelineStatus(nextStep);\n        } else {\n          setPipelineStatus('error');\n          setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${errorMessage}`);\n        }\n      } catch (err) {\n        console.error(`API call failed for ${step} (${apiEndpoint}):`, err);\n        setPipelineStatus('error');\n        setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${err.message || 'Network or API error'}`);\n      } finally {\n        if (!success || nextStep === 'complete') {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    // --- Pipeline Trigger Logic (Updated Start) ---\n    if (pipelineStatus === 'conversation_complete') {\n      const timer = setTimeout(() => {\n        // Start with the Plan generation now\n        setPipelineStatus('processing_plan');\n      }, 500);\n      return () => clearTimeout(timer);\n    } else if (pipelineStatus.startsWith('processing_')) {\n      runPipelineStep(pipelineStatus);\n    } else if (pipelineStatus === 'complete') {\n      setPipelineMessage('Processing Complete! Visualizations generated.');\n      setIsLoading(false);\n    } else if (pipelineStatus === 'error') {\n      setIsLoading(false);\n    }\n  }, [pipelineStatus]); // Keep dependency\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userResponse.trim() || isLoading || isFinal || pipelineStatus !== 'conversation') return;\n    const answer = userResponse.trim();\n    const currentConvoSnapshot = [...conversation];\n    const updatedConvoUI = [...currentConvoSnapshot, `User: ${answer}`];\n    setConversation(updatedConvoUI);\n    setUserResponse('');\n    setIsLoading(true);\n    setPipelineMessage('');\n    try {\n      const data = await callApi('conversation', 'POST', {\n        user_response: answer\n      });\n      const newConvo = data.conversation || [];\n      const finalProblemData = data.final_problem || null;\n      processAndSetConversation(newConvo, finalProblemData); // Use helper\n    } catch (err) {\n      console.error('API call failed:', err);\n      setConversation(currentConvoSnapshot);\n      setUserResponse(answer);\n      setPipelineStatus('error');\n      setPipelineMessage(`Failed to get response: ${err.message || 'API error'}`);\n    } finally {\n      // Re-evaluate isLoading based on whether the conversation phase is complete\n      const problemIsNowFinal = !!(finalProblemText || state !== null && state !== void 0 && state.final_problem); // Check if problem is determined now\n      if (!problemIsNowFinal && pipelineStatus !== 'error') {\n        setIsLoading(false);\n      }\n      // If problem became final, isLoading will be handled by the pipeline effect\n    }\n  };\n  const cleanMessage = (msg, prefixToRemove) => {\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\n    cleaned = cleaned.replace(/^ai:\\s*/i, '').trim();\n    return cleaned;\n  };\n  const shouldDisplaySystemMessage = msg => {\n    if (!msg.startsWith('System:')) return true;\n    const cleanedMsg = msg.substring('System:'.length).trim();\n    const content = cleanedMsg.toLowerCase();\n    if (content === BACKEND_SYSTEM_PROMPT_INITIAL_CORE || content === BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE) {\n      return false;\n    }\n    const hiddenPhrases = [\"you are \", \"your task is\", \"format 1:\", \"format 2:\", \"decide if you now have enough information\", \"continue the process\", \"structure a well-defined business problem statement\", \"your response should only include the final business problem statement\", \"based on the entire conversation.*final business problem statement\"];\n    return !hiddenPhrases.some(phrase => content.includes(phrase.replace(/\\.\\*/g, '')));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.conversationPageWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [pipelineStatus === 'initializing' && 'Initializing...', pipelineStatus === 'conversation' && !isFinal && 'Defining the Business Problem...', isFinal && pipelineStatus === 'conversation_complete' && 'Business Problem Defined', pipelineStatus.startsWith('processing_') && 'Processing Pipeline...', pipelineStatus === 'complete' && 'Processing Complete', pipelineStatus === 'error' && 'Error Occurred']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), isFinal && pipelineStatus !== 'conversation' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.finalProblemDisplay,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final Business Problem:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.finalProblemText,\n          children: finalProblemText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), (isLoading || pipelineStatus.startsWith('processing_') || pipelineStatus === 'conversation_complete') && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.pipelineMessage,\n          children: [\"\\u23F3 \", pipelineMessage || 'Starting Pipeline...']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 18\n        }, this), pipelineStatus === 'complete' && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.pipelineMessage,\n          children: [\"\\u2705 \", pipelineMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 17\n        }, this), pipelineStatus === 'error' && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.pipelineMessage} ${styles.errorMessage}`,\n          children: [\"\\u274C \", pipelineMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.conversation,\n          children: [conversation.map((msg, idx) => {\n            const isUser = msg.startsWith('User:');\n            const isSystemOrAI = msg.startsWith('System:') || msg.startsWith('AI:');\n            const prefix = isUser ? 'User:' : msg.startsWith('AI:') ? 'AI:' : 'System:';\n            const bubbleClass = isUser ? styles.userBubble : styles.aiBubble;\n            const cleanedMsg = cleanMessage(msg, prefix);\n            const display = isUser || isSystemOrAI && shouldDisplaySystemMessage(msg);\n            if (cleanedMsg && display) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: bubbleClass,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    whiteSpace: 'pre-wrap'\n                  },\n                  children: cleanedMsg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 27\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 326,\n                columnNumber: 25\n              }, this);\n            }\n            return null;\n          }), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.loadingIndicator,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: pipelineMessage || 'Thinking...'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }, this), pipelineStatus === 'error' && !isLoading && !isFinal && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.pipelineMessage} ${styles.errorMessage}`,\n            children: [\"\\u274C \", pipelineMessage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: conversationEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), pipelineStatus === 'conversation' && !isFinal && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: styles.responseForm,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your answer here...\",\n            value: userResponse,\n            onChange: e => setUserResponse(e.target.value),\n            required: true,\n            disabled: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: styles.submitButton,\n            disabled: isLoading || !userResponse.trim(),\n            children: isLoading ? 'Sending...' : 'Send'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n}\n_s(Conversation, \"/UXF0K4RY/xRGBLBHn0caeuyd0k=\", false, function () {\n  return [useLocation];\n});\n_c = Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","styles","callApi","jsxDEV","_jsxDEV","Fragment","_Fragment","BACKEND_SYSTEM_PROMPT_INITIAL_CORE","trim","toLowerCase","BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE","Conversation","_s","state","conversation","setConversation","userResponse","setUserResponse","isFinal","setIsFinal","finalProblemText","setFinalProblemText","isLoading","setIsLoading","pipelineStatus","setPipelineStatus","pipelineMessage","setPipelineMessage","conversationEndRef","processAndSetConversation","convoData","finalProblemData","filteredConvo","filter","msg","startsWith","indexOf","length","locationState","initialConvoFromState","initialFinalProblemFromState","final_problem","then","data","console","error","catch","err","message","finally","_conversationEndRef$c","current","scrollIntoView","behavior","runPipelineStep","step","_resultData","_resultData2","_resultData3","_resultData4","_resultData5","_resultData6","_resultData7","_resultData8","nextStep","success","errorMessage","apiEndpoint","apiMethod","resultData","status","details","_resultData9","_resultData10","vlmResult","warn","vlmError","replace","timer","setTimeout","clearTimeout","handleSubmit","e","preventDefault","answer","currentConvoSnapshot","updatedConvoUI","user_response","newConvo","problemIsNowFinal","cleanMessage","prefixToRemove","cleaned","substring","shouldDisplaySystemMessage","cleanedMsg","content","hiddenPhrases","some","phrase","includes","className","conversationPageWrapper","children","chatWindow","header","fileName","_jsxFileName","lineNumber","columnNumber","finalProblemDisplay","map","idx","isUser","isSystemOrAI","prefix","bubbleClass","userBubble","aiBubble","display","style","whiteSpace","loadingIndicator","ref","responseForm","onSubmit","type","placeholder","value","onChange","target","required","disabled","submitButton","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/Conversation.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './conversation_style.module.css';\r\nimport { callApi } from '../api/client'; // Ensure this points to your API client function\r\n\r\nconst BACKEND_SYSTEM_PROMPT_INITIAL_CORE = `\r\nYou are an AI assisting with business problem definition.\r\nThe user will provide a brief business problem statement.\r\nYour task is to:\r\n1. Analyze the user's problem statement.\r\n2. Decide if you need more information to understand the problem deeply enough to formulate a well-defined business problem statement.\r\n3. If you need more information, ask ONE clarifying question.  The question should be specific and help you understand a crucial aspect of the problem.\r\n4. If you believe you have enough information to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it. Do not ask a question in this case.\r\nYour response should follow one of these formats:\r\nFormat 1: Asking a Clarifying Question (if more info needed):\r\n<Your clarifying question>\r\nFormat 2: Ready to formulate problem (if enough info):\r\nReady to formulate problem.  (Your response MUST START with this EXACT phrase)\r\nExample:\r\nWhat specific metrics are you currently tracking to measure this problem?\r\nStart the process now.\r\n`.trim().toLowerCase();\r\n\r\nconst BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE = `\r\nYou are continuing to assist with business problem definition.\r\nThe user has responded to your previous question.\r\nYour task is to:\r\n1. Review the entire conversation so far, including the initial problem statement and the user's responses to your questions.\r\n2. Decide if you now have enough information to formulate a well-defined business problem statement.\r\n3. If you still need more information, ask ONE more clarifying question.\r\n4. If you believe you have enough information NOW to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it.\r\nYour response should follow one of these formats:\r\nFormat 1: Asking a Clarifying Question:\r\n<Your clarifying question>\r\nFormat 2: Ready to formulate problem:\r\nReady to formulate problem. (Your response MUST START with this EXACT phrase)\r\nContinue the process.\r\n`.trim().toLowerCase();\r\n\r\n\r\nexport default function Conversation() {\r\n  const { state } = useLocation();\r\n  const [conversation, setConversation] = useState([]);\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [isFinal, setIsFinal] = useState(false);\r\n  const [finalProblemText, setFinalProblemText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // Updated Pipeline Status states reflecting the new order\r\n  const [pipelineStatus, setPipelineStatus] = useState('idle'); // idle, initializing, conversation, conversation_complete, processing_plan, processing_eda, processing_ml, processing_viz_plan, processing_viz, complete, error\r\n  const [pipelineMessage, setPipelineMessage] = useState('');\r\n  const conversationEndRef = useRef(null);\r\n\r\n  const processAndSetConversation = (convoData, finalProblemData) => {\r\n    const filteredConvo = (convoData || []).filter(msg =>\r\n        !msg.startsWith('FileDetails:') &&\r\n        !(msg.startsWith('User:') && (convoData || []).indexOf(msg) === 0)\r\n    );\r\n    setConversation(filteredConvo);\r\n\r\n    if (finalProblemData) {\r\n        setFinalProblemText(finalProblemData);\r\n        setIsFinal(true);\r\n        setPipelineStatus('conversation_complete');\r\n    } else if (filteredConvo.length > 0) {\r\n        setPipelineStatus('conversation');\r\n    } else {\r\n        setPipelineStatus('error');\r\n        setPipelineMessage('Conversation initialization failed or empty.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const locationState = state;\r\n    let initialConvoFromState = [];\r\n    let initialFinalProblemFromState = null;\r\n\r\n    if (locationState) {\r\n        initialConvoFromState = locationState.conversation || [];\r\n        initialFinalProblemFromState = locationState.final_problem || null;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setPipelineStatus('initializing');\r\n    setPipelineMessage('Initializing conversation...');\r\n\r\n    if (initialFinalProblemFromState) {\r\n        processAndSetConversation(initialConvoFromState, initialFinalProblemFromState);\r\n        setIsLoading(false);\r\n        setPipelineMessage('');\r\n    } else {\r\n        callApi('conversation', 'GET')\r\n            .then(data => {\r\n                if (data && data.conversation) {\r\n                    processAndSetConversation(data.conversation, data.final_problem);\r\n                } else {\r\n                     console.error(\"GET /api/conversation response missing data:\", data);\r\n                     setPipelineStatus('error');\r\n                     setPipelineMessage('Failed to get initial conversation state from server.');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.error(\"Initial GET /api/conversation failed:\", err);\r\n                setPipelineStatus('error');\r\n                setPipelineMessage(`Failed to connect: ${err.message || 'Network error'}`);\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n                 if (pipelineStatus !== 'error') {\r\n                     setPipelineMessage('');\r\n                 }\r\n            });\r\n    }\r\n  }, [state]); // Removed processAndSetConversation from deps\r\n\r\n\r\n  useEffect(() => {\r\n    if (pipelineStatus === 'conversation' || pipelineStatus === 'initializing') {\r\n       conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [conversation, pipelineStatus, isLoading]);\r\n\r\n\r\n  // --- Effect 3: Trigger Pipeline Steps (Updated Order) ---\r\n  useEffect(() => {\r\n    const runPipelineStep = async (step) => {\r\n      let nextStep = '';\r\n      let success = false;\r\n      let errorMessage = '';\r\n      let apiEndpoint = '';\r\n      let apiMethod = 'POST';\r\n      let resultData = null;\r\n\r\n      setIsLoading(true);\r\n\r\n      try {\r\n        switch (step) {\r\n          // --- Step 1: Generate Unified Plan (SuperLLM) ---\r\n          case 'processing_plan':\r\n             setPipelineMessage('Generating Unified Analysis & ML Plan...');\r\n             apiEndpoint = 'superllm'; // Call the endpoint that triggers the planner\r\n             resultData = await callApi(apiEndpoint, apiMethod);\r\n             // Adjust success check based on actual backend response\r\n             success = resultData?.status === 'plan_generated' || resultData?.status === 'ml_plan_exists'; // Allow checking existing plan too\r\n             if (!success) errorMessage = resultData?.error || resultData?.details || 'Unified plan generation failed.';\r\n             else nextStep = 'processing_eda'; // Next step is EDA\r\n             break;\r\n\r\n          // --- Step 2: Run EDA (Guided by Plan) ---\r\n          case 'processing_eda':\r\n            setPipelineMessage('Generating & Running Guided EDA...');\r\n            apiEndpoint = 'dataanalysis';\r\n            resultData = await callApi(apiEndpoint, apiMethod);\r\n            success = resultData?.status === 'success';\r\n            if (!success) errorMessage = resultData?.error || resultData?.details || 'Guided EDA execution failed.';\r\n            else nextStep = 'processing_ml'; // Next step is ML\r\n            break;\r\n\r\n          // --- Step 3: Run ML (Based on Plan & EDA Output) ---\r\n          case 'processing_ml':\r\n             setPipelineMessage('Generating & Running ML Code...');\r\n             apiEndpoint = 'ml';\r\n             resultData = await callApi(apiEndpoint, apiMethod);\r\n             success = resultData?.status === 'success';\r\n             if (!success) {\r\n                 errorMessage = resultData?.error || resultData?.details || 'ML execution failed.';\r\n             } else {\r\n                 // Call VLM right after ML success\r\n                 setPipelineMessage('Generating Visualisations...');\r\n                 try {\r\n                     const vlmResult = await callApi('vlm', 'POST');\r\n                     success = vlmResult?.status === 'success';\r\n                     if (!success) {\r\n                         console.warn('VLM generated warnings:', vlmResult?.error);\r\n                     }\r\n                 } catch (vlmError) {\r\n                     console.error('VLM processing error:', vlmError);\r\n                 }\r\n                 nextStep = 'complete'; // Skip visualization steps, go directly to complete\r\n             }\r\n             break;\r\n\r\n          default:\r\n            console.warn(\"Unknown pipeline step:\", step);\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        if (success) {\r\n          setPipelineStatus(nextStep);\r\n        } else {\r\n          setPipelineStatus('error');\r\n          setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${errorMessage}`);\r\n        }\r\n\r\n      } catch (err) {\r\n        console.error(`API call failed for ${step} (${apiEndpoint}):`, err);\r\n        setPipelineStatus('error');\r\n        setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${err.message || 'Network or API error'}`);\r\n      } finally {\r\n          if (!success || nextStep === 'complete') {\r\n             setIsLoading(false);\r\n          }\r\n      }\r\n    };\r\n\r\n    // --- Pipeline Trigger Logic (Updated Start) ---\r\n    if (pipelineStatus === 'conversation_complete') {\r\n      const timer = setTimeout(() => {\r\n         // Start with the Plan generation now\r\n         setPipelineStatus('processing_plan');\r\n      }, 500);\r\n      return () => clearTimeout(timer);\r\n    } else if (pipelineStatus.startsWith('processing_')) {\r\n      runPipelineStep(pipelineStatus);\r\n    } else if (pipelineStatus === 'complete') {\r\n        setPipelineMessage('Processing Complete! Visualizations generated.');\r\n        setIsLoading(false);\r\n    } else if (pipelineStatus === 'error') {\r\n        setIsLoading(false);\r\n    }\r\n\r\n  }, [pipelineStatus]); // Keep dependency\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userResponse.trim() || isLoading || isFinal || pipelineStatus !== 'conversation') return;\r\n\r\n    const answer = userResponse.trim();\r\n    const currentConvoSnapshot = [...conversation];\r\n    const updatedConvoUI = [...currentConvoSnapshot, `User: ${answer}`];\r\n    setConversation(updatedConvoUI);\r\n    setUserResponse('');\r\n    setIsLoading(true);\r\n    setPipelineMessage('');\r\n\r\n    try {\r\n      const data = await callApi('conversation', 'POST', { user_response: answer });\r\n      const newConvo = data.conversation || [];\r\n      const finalProblemData = data.final_problem || null;\r\n      processAndSetConversation(newConvo, finalProblemData); // Use helper\r\n    } catch (err) {\r\n      console.error('API call failed:', err);\r\n      setConversation(currentConvoSnapshot);\r\n      setUserResponse(answer);\r\n      setPipelineStatus('error');\r\n      setPipelineMessage(`Failed to get response: ${err.message || 'API error'}`);\r\n    } finally {\r\n      // Re-evaluate isLoading based on whether the conversation phase is complete\r\n       const problemIsNowFinal = !!(finalProblemText || state?.final_problem); // Check if problem is determined now\r\n       if (!problemIsNowFinal && pipelineStatus !== 'error') {\r\n           setIsLoading(false);\r\n       }\r\n       // If problem became final, isLoading will be handled by the pipeline effect\r\n    }\r\n  };\r\n\r\n  const cleanMessage = (msg, prefixToRemove) => {\r\n    let cleaned = msg.startsWith(prefixToRemove)\r\n      ? msg.substring(prefixToRemove.length).trim()\r\n      : msg.trim();\r\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\r\n    cleaned = cleaned.replace(/^ai:\\s*/i, '').trim();\r\n    return cleaned;\r\n  };\r\n\r\n  const shouldDisplaySystemMessage = (msg) => {\r\n    if (!msg.startsWith('System:')) return true;\r\n    const cleanedMsg = msg.substring('System:'.length).trim();\r\n    const content = cleanedMsg.toLowerCase();\r\n    if (content === BACKEND_SYSTEM_PROMPT_INITIAL_CORE ||\r\n        content === BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE) {\r\n        return false;\r\n    }\r\n    const hiddenPhrases = [\r\n        \"you are \", \"your task is\", \"format 1:\", \"format 2:\",\r\n        \"decide if you now have enough information\", \"continue the process\",\r\n        \"structure a well-defined business problem statement\",\r\n        \"your response should only include the final business problem statement\",\r\n        \"based on the entire conversation.*final business problem statement\"\r\n    ];\r\n    return !hiddenPhrases.some(phrase => content.includes(phrase.replace(/\\.\\*/g, '')));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.conversationPageWrapper}>\r\n      <div className={styles.chatWindow}>\r\n        <div className={styles.header}>\r\n          <h1>\r\n            {pipelineStatus === 'initializing' && 'Initializing...'}\r\n            {pipelineStatus === 'conversation' && !isFinal && 'Defining the Business Problem...'}\r\n            {isFinal && pipelineStatus === 'conversation_complete' && 'Business Problem Defined'}\r\n            {pipelineStatus.startsWith('processing_') && 'Processing Pipeline...'}\r\n            {pipelineStatus === 'complete' && 'Processing Complete'}\r\n            {pipelineStatus === 'error' && 'Error Occurred'}\r\n          </h1>\r\n        </div>\r\n\r\n        {isFinal && pipelineStatus !== 'conversation' ? (\r\n          <div className={styles.finalProblemDisplay}>\r\n            <h2>Final Business Problem:</h2>\r\n            <p className={styles.finalProblemText}>{finalProblemText}</p>\r\n            {(isLoading || pipelineStatus.startsWith('processing_') || pipelineStatus === 'conversation_complete') && (\r\n                 <div className={styles.pipelineMessage}>⏳ {pipelineMessage || 'Starting Pipeline...'}</div>\r\n            )}\r\n            {pipelineStatus === 'complete' && !isLoading && (\r\n                <div className={styles.pipelineMessage}>✅ {pipelineMessage}</div>\r\n            )}\r\n             {pipelineStatus === 'error' && !isLoading && (\r\n                <div className={`${styles.pipelineMessage} ${styles.errorMessage}`}>❌ {pipelineMessage}</div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className={styles.conversation}>\r\n              {conversation.map((msg, idx) => {\r\n                 const isUser = msg.startsWith('User:');\r\n                 const isSystemOrAI = msg.startsWith('System:') || msg.startsWith('AI:');\r\n                 const prefix = isUser ? 'User:' : (msg.startsWith('AI:') ? 'AI:' : 'System:');\r\n                 const bubbleClass = isUser ? styles.userBubble : styles.aiBubble;\r\n                 const cleanedMsg = cleanMessage(msg, prefix);\r\n                 const display = isUser || (isSystemOrAI && shouldDisplaySystemMessage(msg));\r\n\r\n                 if (cleanedMsg && display) {\r\n                     return (\r\n                        <div key={idx} className={bubbleClass}>\r\n                          <p style={{ whiteSpace: 'pre-wrap' }}>{cleanedMsg}</p>\r\n                        </div>\r\n                     );\r\n                 }\r\n                 return null;\r\n              })}\r\n\r\n              {isLoading && (\r\n                <div className={styles.loadingIndicator}>\r\n                  <p>{pipelineMessage || 'Thinking...'}</p>\r\n                </div>\r\n              )}\r\n               {pipelineStatus === 'error' && !isLoading && !isFinal && (\r\n                  <div className={`${styles.pipelineMessage} ${styles.errorMessage}`}>❌ {pipelineMessage}</div>\r\n              )}\r\n              <div ref={conversationEndRef} />\r\n            </div>\r\n\r\n            {pipelineStatus === 'conversation' && !isFinal && (\r\n              <form className={styles.responseForm} onSubmit={handleSubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Type your answer here...\"\r\n                  value={userResponse}\r\n                  onChange={e => setUserResponse(e.target.value)}\r\n                  required\r\n                  disabled={isLoading}\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className={styles.submitButton}\r\n                  disabled={isLoading || !userResponse.trim()}\r\n                >\r\n                  {isLoading ? 'Sending...' : 'Send'}\r\n                </button>\r\n              </form>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}