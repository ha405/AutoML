{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './conversation_style.module.css';\nimport { callApi } from '../api/client'; // Ensure this points to your API client function\n\n// --- Define Backend Prompt Strings as JS Constants ---\n// Extract the core message, trim, and lower-case for easier comparison later\n// IMPORTANT: Update these strings if your Python feedback.py prompts change!\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst BACKEND_SYSTEM_PROMPT_INITIAL_CORE = `\nYou are an AI assisting with business problem definition.\nThe user will provide a brief business problem statement.\nYour task is to:\n1. Analyze the user's problem statement.\n2. Decide if you need more information to understand the problem deeply enough to formulate a well-defined business problem statement.\n3. If you need more information, ask ONE clarifying question.  The question should be specific and help you understand a crucial aspect of the problem.\n4. If you believe you have enough information to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it. Do not ask a question in this case.\nYour response should follow one of these formats:\nFormat 1: Asking a Clarifying Question (if more info needed):\n<Your clarifying question>\nFormat 2: Ready to formulate problem (if enough info):\nReady to formulate problem.  (Your response MUST START with this EXACT phrase)\nExample:\nWhat specific metrics are you currently tracking to measure this problem?\nStart the process now.\n`.trim().toLowerCase();\nconst BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE = `\nYou are continuing to assist with business problem definition.\nThe user has responded to your previous question.\nYour task is to:\n1. Review the entire conversation so far, including the initial problem statement and the user's responses to your questions.\n2. Decide if you now have enough information to formulate a well-defined business problem statement.\n3. If you still need more information, ask ONE more clarifying question.\n4. If you believe you have enough information NOW to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it.\nYour response should follow one of these formats:\nFormat 1: Asking a Clarifying Question:\n<Your clarifying question>\nFormat 2: Ready to formulate problem:\nReady to formulate problem. (Your response MUST START with this EXACT phrase)\nContinue the process.\n`.trim().toLowerCase();\n// --- End Backend Prompt Strings ---\n\nexport default function Conversation() {\n  _s();\n  const {\n    state\n  } = useLocation(); // Initial state from /api/home via navigation\n  const [conversation, setConversation] = useState([]);\n  const [userResponse, setUserResponse] = useState('');\n  const [isFinal, setIsFinal] = useState(false);\n  const [finalProblemText, setFinalProblemText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [pipelineStatus, setPipelineStatus] = useState('idle'); // idle, conversation, conversation_complete, processing_eda, processing_plan, processing_ml, processing_viz_plan, processing_viz, complete, error\n  const [pipelineMessage, setPipelineMessage] = useState(''); // User-facing status message\n  const conversationEndRef = useRef(null);\n\n  // --- Effect 1: Initial Load and Setup ---\n  useEffect(() => {\n    const locationState = state;\n    let initialConvo = [];\n    let initialFinalProblem = null;\n    if (locationState) {\n      initialConvo = locationState.conversation || [];\n      initialFinalProblem = locationState.final_problem || null;\n    }\n\n    // Filter out non-display messages (FileDetails, initial User prompt if present)\n    const filteredConvo = initialConvo.filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && initialConvo.indexOf(msg) === 0));\n    setConversation(filteredConvo);\n    if (initialFinalProblem) {\n      setFinalProblemText(initialFinalProblem);\n      setIsFinal(true);\n      setPipelineStatus('conversation_complete');\n    } else if (filteredConvo.length > 0) {\n      // If initialConvo had content (likely the first AI question from /api/home)\n      setPipelineStatus('conversation');\n    } else {\n      // This might happen if /api/home failed or returned empty convo\n      setPipelineStatus('error');\n      setPipelineMessage('Failed to initialize conversation.');\n    }\n  }, [state]); // Depend only on state from navigation\n\n  // --- Effect 2: Scroll Conversation ---\n  useEffect(() => {\n    if (pipelineStatus === 'conversation') {\n      var _conversationEndRef$c;\n      (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [conversation, pipelineStatus]);\n\n  // --- Effect 3: Trigger Pipeline Steps ---\n  useEffect(() => {\n    const runPipelineStep = async step => {\n      var _resultData, _resultData$status, _resultData2, _resultData3, _resultData4, _resultData5, _resultData6, _resultData7, _resultData8, _resultData9, _resultData10, _resultData11, _resultData12, _resultData13;\n      let nextStep = '';\n      let success = false;\n      let errorMessage = '';\n      let apiEndpoint = '';\n      let apiMethod = 'POST';\n      let resultData = null; // To store response data if needed\n\n      try {\n        switch (step) {\n          case 'processing_eda':\n            setPipelineMessage('Generating & Running EDA...');\n            apiEndpoint = 'dataanalysis';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            // Adjust success check based on actual backend response structure\n            success = ((_resultData = resultData) === null || _resultData === void 0 ? void 0 : (_resultData$status = _resultData.status) === null || _resultData$status === void 0 ? void 0 : _resultData$status.includes('success')) || ((_resultData2 = resultData) === null || _resultData2 === void 0 ? void 0 : _resultData2.execution_successful);\n            if (!success) errorMessage = ((_resultData3 = resultData) === null || _resultData3 === void 0 ? void 0 : _resultData3.error) || 'EDA execution failed.';else nextStep = 'processing_plan';\n            break;\n          case 'processing_plan':\n            setPipelineMessage('Generating ML Plan...');\n            apiEndpoint = 'superllm';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            success = ((_resultData4 = resultData) === null || _resultData4 === void 0 ? void 0 : _resultData4.status) === 'plan_generated';\n            if (!success) errorMessage = ((_resultData5 = resultData) === null || _resultData5 === void 0 ? void 0 : _resultData5.error) || 'ML plan generation failed.';else nextStep = 'processing_ml';\n            break;\n          case 'processing_ml':\n            setPipelineMessage('Generating & Running ML Code...');\n            apiEndpoint = 'ml';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            success = ((_resultData6 = resultData) === null || _resultData6 === void 0 ? void 0 : _resultData6.status) === 'success';\n            if (!success) errorMessage = ((_resultData7 = resultData) === null || _resultData7 === void 0 ? void 0 : _resultData7.error) || ((_resultData8 = resultData) === null || _resultData8 === void 0 ? void 0 : _resultData8.message) || 'ML execution failed.';else nextStep = 'processing_viz_plan';\n            break;\n          case 'processing_viz_plan':\n            setPipelineMessage('Generating Visualization Plan...');\n            apiEndpoint = 'visualizationplanning';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            success = ((_resultData9 = resultData) === null || _resultData9 === void 0 ? void 0 : _resultData9.status) === 'plan_generated';\n            if (!success) errorMessage = ((_resultData10 = resultData) === null || _resultData10 === void 0 ? void 0 : _resultData10.error) || 'Visualization plan generation failed.';else nextStep = 'processing_viz';\n            break;\n          case 'processing_viz':\n            setPipelineMessage('Generating & Running Visualizations...');\n            apiEndpoint = 'visualizations';\n            resultData = await callApi(apiEndpoint, apiMethod);\n            success = ((_resultData11 = resultData) === null || _resultData11 === void 0 ? void 0 : _resultData11.status) === 'success';\n            if (!success) errorMessage = ((_resultData12 = resultData) === null || _resultData12 === void 0 ? void 0 : _resultData12.error) || ((_resultData13 = resultData) === null || _resultData13 === void 0 ? void 0 : _resultData13.message) || 'Visualization execution failed.';else nextStep = 'complete';\n            break;\n          default:\n            console.warn(\"Unknown pipeline step:\", step);\n            return;\n        }\n        if (success) {\n          setPipelineStatus(nextStep);\n        } else {\n          setPipelineStatus('error');\n          setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${errorMessage}`);\n        }\n      } catch (err) {\n        console.error(`API call failed for ${step} (${apiEndpoint}):`, err);\n        setPipelineStatus('error');\n        setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${err.message || 'Network or API error'}`);\n      }\n    };\n    if (pipelineStatus === 'conversation_complete') {\n      setPipelineStatus('processing_eda');\n    } else if (pipelineStatus.startsWith('processing_')) {\n      runPipelineStep(pipelineStatus);\n    } else if (pipelineStatus === 'complete') {\n      setPipelineMessage('Processing Complete! Visualizations generated.');\n    }\n  }, [pipelineStatus]); // Run when pipelineStatus changes\n\n  // --- Handle User Submission ---\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userResponse.trim() || isLoading || isFinal || pipelineStatus !== 'conversation') return;\n    const answer = userResponse.trim();\n    const currentConvoSnapshot = [...conversation]; // Snapshot before optimistic update\n    const updatedConvoUI = [...currentConvoSnapshot, `User: ${answer}`];\n    setConversation(updatedConvoUI);\n    setUserResponse('');\n    setIsLoading(true);\n    try {\n      const data = await callApi('conversation', 'POST', {\n        user_response: answer\n      });\n      const newConvo = data.conversation || [];\n      // Filter response from backend before setting state\n      const finalFilteredConvo = newConvo.filter(msg => !msg.startsWith('FileDetails:') && !(msg.startsWith('User:') && newConvo.indexOf(msg) === 0) // Filter initial user prompt IF backend includes it\n      );\n      setConversation(finalFilteredConvo);\n      if (data.final_problem) {\n        setFinalProblemText(data.final_problem);\n        setIsFinal(true);\n        setPipelineStatus('conversation_complete'); // Trigger pipeline\n      }\n    } catch (err) {\n      console.error('API call failed:', err);\n      setConversation(currentConvoSnapshot); // Revert on error\n      setUserResponse(answer);\n      setPipelineStatus('error');\n      setPipelineMessage(`Failed to get response: ${err.message || 'API error'}`);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Helper to clean messages\n  const cleanMessage = (msg, prefixToRemove) => {\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim(); // Remove \"Question X)\" prefix\n    cleaned = cleaned.replace(/^ai:\\s*/i, '').trim(); // Remove potential \"AI: \" prefix if backend adds it unexpectedly\n    return cleaned;\n  };\n\n  // Filter system messages\n  const shouldDisplaySystemMessage = msg => {\n    // Only check messages starting with \"System:\"\n    if (!msg.startsWith('System:')) return true; // Display non-system messages\n\n    const cleanedMsg = msg.substring('System:'.length).trim();\n    const content = cleanedMsg.toLowerCase();\n\n    // Check for exact match against the core prompt text (already lowercased)\n    if (content === BACKEND_SYSTEM_PROMPT_INITIAL_CORE || content === BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE) {\n      return false; // Don't display the exact system prompts\n    }\n\n    // Check for other generic hidden phrases\n    const hiddenPhrases = [\"you are \", \"your task is\", \"format 1:\", \"format 2:\", \"decide if you now have enough information\", \"continue the process\", \"structure a well-defined business problem statement\", \"your response should only include the final business problem statement\", \"based on the entire conversation.*final business problem statement\" // Basic check\n    ];\n\n    // If content includes any of these, hide it\n    return !hiddenPhrases.some(phrase => content.includes(phrase.replace(/\\.\\*/g, '')));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.conversationPageWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [pipelineStatus === 'conversation' && !isFinal && 'Defining the Business Problem...', isFinal && pipelineStatus !== 'error' && !pipelineStatus.startsWith('processing_') && 'Business Problem Defined', pipelineStatus.startsWith('processing_') && 'Processing Pipeline...', pipelineStatus === 'complete' && 'Processing Complete', pipelineStatus === 'error' && 'Error Occurred']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), isFinal && !pipelineStatus.startsWith('processing_') && pipelineStatus !== 'conversation' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.finalProblemDisplay,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Final Business Problem:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.finalProblemText,\n          children: finalProblemText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }, this), pipelineStatus === 'complete' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.pipelineMessage,\n          children: [\"\\u2705 \", pipelineMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }, this), pipelineStatus === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `${styles.pipelineMessage} ${styles.errorMessage}`,\n          children: [\"\\u274C \", pipelineMessage]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 17\n        }, this), pipelineStatus === 'conversation_complete' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.pipelineMessage,\n          children: \"\\u23F3 Preparing Automated Analysis...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.conversation,\n          children: [conversation.map((msg, idx) => {\n            const isUser = msg.startsWith('User:');\n            const isSystemOrAI = msg.startsWith('System:') || msg.startsWith('AI:'); // Backend now uses \"AI:\"\n            const prefix = isUser ? 'User:' : msg.startsWith('AI:') ? 'AI:' : 'System:';\n            const bubbleClass = isUser ? styles.userBubble : styles.aiBubble;\n            const cleanedMsg = cleanMessage(msg, prefix);\n\n            // Determine if the message should be displayed\n            const display = isUser || isSystemOrAI && shouldDisplaySystemMessage(msg);\n            if (cleanedMsg && display) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: bubbleClass,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    whiteSpace: 'pre-wrap'\n                  },\n                  children: cleanedMsg\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 27\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 25\n              }, this);\n            }\n            return null;\n          }), (isLoading || pipelineStatus.startsWith('processing_')) && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.loadingIndicator,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: pipelineStatus.startsWith('processing_') ? pipelineMessage : 'Thinking...'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this), pipelineStatus === 'error' && pipelineStatus !== 'conversation_complete' && !isFinal && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${styles.pipelineMessage} ${styles.errorMessage}`,\n            children: [\"\\u274C \", pipelineMessage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            ref: conversationEndRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), pipelineStatus === 'conversation' && !isFinal && /*#__PURE__*/_jsxDEV(\"form\", {\n          className: styles.responseForm,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Type your answer here...\",\n            value: userResponse,\n            onChange: e => setUserResponse(e.target.value),\n            required: true,\n            disabled: isLoading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: styles.submitButton,\n            disabled: isLoading || !userResponse.trim(),\n            children: isLoading ? 'Sending...' : 'Send'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s(Conversation, \"/UXF0K4RY/xRGBLBHn0caeuyd0k=\", false, function () {\n  return [useLocation];\n});\n_c = Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","styles","callApi","jsxDEV","_jsxDEV","Fragment","_Fragment","BACKEND_SYSTEM_PROMPT_INITIAL_CORE","trim","toLowerCase","BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE","Conversation","_s","state","conversation","setConversation","userResponse","setUserResponse","isFinal","setIsFinal","finalProblemText","setFinalProblemText","isLoading","setIsLoading","pipelineStatus","setPipelineStatus","pipelineMessage","setPipelineMessage","conversationEndRef","locationState","initialConvo","initialFinalProblem","final_problem","filteredConvo","filter","msg","startsWith","indexOf","length","_conversationEndRef$c","current","scrollIntoView","behavior","runPipelineStep","step","_resultData","_resultData$status","_resultData2","_resultData3","_resultData4","_resultData5","_resultData6","_resultData7","_resultData8","_resultData9","_resultData10","_resultData11","_resultData12","_resultData13","nextStep","success","errorMessage","apiEndpoint","apiMethod","resultData","status","includes","execution_successful","error","message","console","warn","replace","err","handleSubmit","e","preventDefault","answer","currentConvoSnapshot","updatedConvoUI","data","user_response","newConvo","finalFilteredConvo","cleanMessage","prefixToRemove","cleaned","substring","shouldDisplaySystemMessage","cleanedMsg","content","hiddenPhrases","some","phrase","className","conversationPageWrapper","children","chatWindow","header","fileName","_jsxFileName","lineNumber","columnNumber","finalProblemDisplay","map","idx","isUser","isSystemOrAI","prefix","bubbleClass","userBubble","aiBubble","display","style","whiteSpace","loadingIndicator","ref","responseForm","onSubmit","type","placeholder","value","onChange","target","required","disabled","submitButton","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/Conversation.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './conversation_style.module.css';\r\nimport { callApi } from '../api/client'; // Ensure this points to your API client function\r\n\r\n// --- Define Backend Prompt Strings as JS Constants ---\r\n// Extract the core message, trim, and lower-case for easier comparison later\r\n// IMPORTANT: Update these strings if your Python feedback.py prompts change!\r\nconst BACKEND_SYSTEM_PROMPT_INITIAL_CORE = `\r\nYou are an AI assisting with business problem definition.\r\nThe user will provide a brief business problem statement.\r\nYour task is to:\r\n1. Analyze the user's problem statement.\r\n2. Decide if you need more information to understand the problem deeply enough to formulate a well-defined business problem statement.\r\n3. If you need more information, ask ONE clarifying question.  The question should be specific and help you understand a crucial aspect of the problem.\r\n4. If you believe you have enough information to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it. Do not ask a question in this case.\r\nYour response should follow one of these formats:\r\nFormat 1: Asking a Clarifying Question (if more info needed):\r\n<Your clarifying question>\r\nFormat 2: Ready to formulate problem (if enough info):\r\nReady to formulate problem.  (Your response MUST START with this EXACT phrase)\r\nExample:\r\nWhat specific metrics are you currently tracking to measure this problem?\r\nStart the process now.\r\n`.trim().toLowerCase();\r\n\r\nconst BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE = `\r\nYou are continuing to assist with business problem definition.\r\nThe user has responded to your previous question.\r\nYour task is to:\r\n1. Review the entire conversation so far, including the initial problem statement and the user's responses to your questions.\r\n2. Decide if you now have enough information to formulate a well-defined business problem statement.\r\n3. If you still need more information, ask ONE more clarifying question.\r\n4. If you believe you have enough information NOW to formulate a problem statement, your response MUST START with the EXACT phrase: \"Ready to formulate problem.\" and nothing else before it.\r\nYour response should follow one of these formats:\r\nFormat 1: Asking a Clarifying Question:\r\n<Your clarifying question>\r\nFormat 2: Ready to formulate problem:\r\nReady to formulate problem. (Your response MUST START with this EXACT phrase)\r\nContinue the process.\r\n`.trim().toLowerCase();\r\n// --- End Backend Prompt Strings ---\r\n\r\n\r\nexport default function Conversation() {\r\n  const { state } = useLocation(); // Initial state from /api/home via navigation\r\n  const [conversation, setConversation] = useState([]);\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [isFinal, setIsFinal] = useState(false);\r\n  const [finalProblemText, setFinalProblemText] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pipelineStatus, setPipelineStatus] = useState('idle'); // idle, conversation, conversation_complete, processing_eda, processing_plan, processing_ml, processing_viz_plan, processing_viz, complete, error\r\n  const [pipelineMessage, setPipelineMessage] = useState(''); // User-facing status message\r\n  const conversationEndRef = useRef(null);\r\n\r\n  // --- Effect 1: Initial Load and Setup ---\r\n  useEffect(() => {\r\n    const locationState = state;\r\n    let initialConvo = [];\r\n    let initialFinalProblem = null;\r\n\r\n    if (locationState) {\r\n        initialConvo = locationState.conversation || [];\r\n        initialFinalProblem = locationState.final_problem || null;\r\n    }\r\n\r\n    // Filter out non-display messages (FileDetails, initial User prompt if present)\r\n    const filteredConvo = initialConvo.filter(msg =>\r\n        !msg.startsWith('FileDetails:') &&\r\n        !(msg.startsWith('User:') && initialConvo.indexOf(msg) === 0)\r\n    );\r\n    setConversation(filteredConvo);\r\n\r\n    if (initialFinalProblem) {\r\n        setFinalProblemText(initialFinalProblem);\r\n        setIsFinal(true);\r\n        setPipelineStatus('conversation_complete');\r\n    } else if (filteredConvo.length > 0) {\r\n        // If initialConvo had content (likely the first AI question from /api/home)\r\n        setPipelineStatus('conversation');\r\n    } else {\r\n        // This might happen if /api/home failed or returned empty convo\r\n        setPipelineStatus('error');\r\n        setPipelineMessage('Failed to initialize conversation.');\r\n    }\r\n\r\n  }, [state]); // Depend only on state from navigation\r\n\r\n\r\n  // --- Effect 2: Scroll Conversation ---\r\n  useEffect(() => {\r\n    if (pipelineStatus === 'conversation') {\r\n      conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n    }\r\n  }, [conversation, pipelineStatus]);\r\n\r\n\r\n  // --- Effect 3: Trigger Pipeline Steps ---\r\n  useEffect(() => {\r\n    const runPipelineStep = async (step) => {\r\n      let nextStep = '';\r\n      let success = false;\r\n      let errorMessage = '';\r\n      let apiEndpoint = '';\r\n      let apiMethod = 'POST';\r\n      let resultData = null; // To store response data if needed\r\n\r\n      try {\r\n        switch (step) {\r\n          case 'processing_eda':\r\n            setPipelineMessage('Generating & Running EDA...');\r\n            apiEndpoint = 'dataanalysis';\r\n            resultData = await callApi(apiEndpoint, apiMethod);\r\n            // Adjust success check based on actual backend response structure\r\n            success = resultData?.status?.includes('success') || resultData?.execution_successful;\r\n            if (!success) errorMessage = resultData?.error || 'EDA execution failed.';\r\n            else nextStep = 'processing_plan';\r\n            break;\r\n\r\n          case 'processing_plan':\r\n             setPipelineMessage('Generating ML Plan...');\r\n             apiEndpoint = 'superllm';\r\n             resultData = await callApi(apiEndpoint, apiMethod);\r\n             success = resultData?.status === 'plan_generated';\r\n             if (!success) errorMessage = resultData?.error || 'ML plan generation failed.';\r\n             else nextStep = 'processing_ml';\r\n            break;\r\n\r\n          case 'processing_ml':\r\n             setPipelineMessage('Generating & Running ML Code...');\r\n             apiEndpoint = 'ml';\r\n             resultData = await callApi(apiEndpoint, apiMethod);\r\n             success = resultData?.status === 'success';\r\n             if (!success) errorMessage = resultData?.error || resultData?.message || 'ML execution failed.';\r\n             else nextStep = 'processing_viz_plan';\r\n            break;\r\n\r\n          case 'processing_viz_plan':\r\n             setPipelineMessage('Generating Visualization Plan...');\r\n             apiEndpoint = 'visualizationplanning';\r\n             resultData = await callApi(apiEndpoint, apiMethod);\r\n             success = resultData?.status === 'plan_generated';\r\n             if (!success) errorMessage = resultData?.error || 'Visualization plan generation failed.';\r\n             else nextStep = 'processing_viz';\r\n            break;\r\n\r\n          case 'processing_viz':\r\n             setPipelineMessage('Generating & Running Visualizations...');\r\n             apiEndpoint = 'visualizations';\r\n             resultData = await callApi(apiEndpoint, apiMethod);\r\n             success = resultData?.status === 'success';\r\n             if (!success) errorMessage = resultData?.error || resultData?.message || 'Visualization execution failed.';\r\n             else nextStep = 'complete';\r\n            break;\r\n\r\n          default:\r\n            console.warn(\"Unknown pipeline step:\", step);\r\n            return;\r\n        }\r\n\r\n        if (success) {\r\n          setPipelineStatus(nextStep);\r\n        } else {\r\n          setPipelineStatus('error');\r\n          setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${errorMessage}`);\r\n        }\r\n\r\n      } catch (err) {\r\n        console.error(`API call failed for ${step} (${apiEndpoint}):`, err);\r\n        setPipelineStatus('error');\r\n        setPipelineMessage(`Error during ${step.replace('processing_', '')}: ${err.message || 'Network or API error'}`);\r\n      }\r\n    };\r\n\r\n    if (pipelineStatus === 'conversation_complete') {\r\n      setPipelineStatus('processing_eda');\r\n    } else if (pipelineStatus.startsWith('processing_')) {\r\n      runPipelineStep(pipelineStatus);\r\n    } else if (pipelineStatus === 'complete') {\r\n        setPipelineMessage('Processing Complete! Visualizations generated.');\r\n    }\r\n\r\n  }, [pipelineStatus]); // Run when pipelineStatus changes\r\n\r\n\r\n  // --- Handle User Submission ---\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userResponse.trim() || isLoading || isFinal || pipelineStatus !== 'conversation') return;\r\n\r\n    const answer = userResponse.trim();\r\n    const currentConvoSnapshot = [...conversation]; // Snapshot before optimistic update\r\n    const updatedConvoUI = [...currentConvoSnapshot, `User: ${answer}`];\r\n    setConversation(updatedConvoUI);\r\n    setUserResponse('');\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const data = await callApi('conversation', 'POST', { user_response: answer });\r\n\r\n      const newConvo = data.conversation || [];\r\n      // Filter response from backend before setting state\r\n      const finalFilteredConvo = newConvo.filter(msg =>\r\n          !msg.startsWith('FileDetails:') &&\r\n          !(msg.startsWith('User:') && newConvo.indexOf(msg) === 0) // Filter initial user prompt IF backend includes it\r\n      );\r\n\r\n      setConversation(finalFilteredConvo);\r\n\r\n      if (data.final_problem) {\r\n        setFinalProblemText(data.final_problem);\r\n        setIsFinal(true);\r\n        setPipelineStatus('conversation_complete'); // Trigger pipeline\r\n      }\r\n    } catch (err) {\r\n      console.error('API call failed:', err);\r\n      setConversation(currentConvoSnapshot); // Revert on error\r\n      setUserResponse(answer);\r\n      setPipelineStatus('error');\r\n      setPipelineMessage(`Failed to get response: ${err.message || 'API error'}`);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Helper to clean messages\r\n  const cleanMessage = (msg, prefixToRemove) => {\r\n    let cleaned = msg.startsWith(prefixToRemove)\r\n      ? msg.substring(prefixToRemove.length).trim()\r\n      : msg.trim();\r\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim(); // Remove \"Question X)\" prefix\r\n    cleaned = cleaned.replace(/^ai:\\s*/i, '').trim(); // Remove potential \"AI: \" prefix if backend adds it unexpectedly\r\n    return cleaned;\r\n  };\r\n\r\n  // Filter system messages\r\n  const shouldDisplaySystemMessage = (msg) => {\r\n    // Only check messages starting with \"System:\"\r\n    if (!msg.startsWith('System:')) return true; // Display non-system messages\r\n\r\n    const cleanedMsg = msg.substring('System:'.length).trim();\r\n    const content = cleanedMsg.toLowerCase();\r\n\r\n    // Check for exact match against the core prompt text (already lowercased)\r\n    if (content === BACKEND_SYSTEM_PROMPT_INITIAL_CORE ||\r\n        content === BACKEND_SYSTEM_PROMPT_NEXT_ITERATION_CORE) {\r\n        return false; // Don't display the exact system prompts\r\n    }\r\n\r\n    // Check for other generic hidden phrases\r\n    const hiddenPhrases = [\r\n        \"you are \", \"your task is\", \"format 1:\", \"format 2:\",\r\n        \"decide if you now have enough information\", \"continue the process\",\r\n        \"structure a well-defined business problem statement\",\r\n        \"your response should only include the final business problem statement\",\r\n        \"based on the entire conversation.*final business problem statement\" // Basic check\r\n    ];\r\n\r\n    // If content includes any of these, hide it\r\n    return !hiddenPhrases.some(phrase => content.includes(phrase.replace(/\\.\\*/g, '')));\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={styles.conversationPageWrapper}>\r\n      <div className={styles.chatWindow}>\r\n        <div className={styles.header}>\r\n          <h1>\r\n            {pipelineStatus === 'conversation' && !isFinal && 'Defining the Business Problem...'}\r\n            {isFinal && pipelineStatus !== 'error' && !pipelineStatus.startsWith('processing_') && 'Business Problem Defined'}\r\n            {pipelineStatus.startsWith('processing_') && 'Processing Pipeline...'}\r\n            {pipelineStatus === 'complete' && 'Processing Complete'}\r\n            {pipelineStatus === 'error' && 'Error Occurred'}\r\n          </h1>\r\n        </div>\r\n\r\n        {isFinal && !pipelineStatus.startsWith('processing_') && pipelineStatus !== 'conversation' ? (\r\n          <div className={styles.finalProblemDisplay}>\r\n            <h2>Final Business Problem:</h2>\r\n            <p className={styles.finalProblemText}>{finalProblemText}</p>\r\n            {pipelineStatus === 'complete' && (\r\n                <div className={styles.pipelineMessage}>✅ {pipelineMessage}</div>\r\n            )}\r\n             {pipelineStatus === 'error' && (\r\n                <div className={`${styles.pipelineMessage} ${styles.errorMessage}`}>❌ {pipelineMessage}</div>\r\n            )}\r\n             {pipelineStatus === 'conversation_complete' && (\r\n                <div className={styles.pipelineMessage}>⏳ Preparing Automated Analysis...</div>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className={styles.conversation}>\r\n              {conversation.map((msg, idx) => {\r\n                 const isUser = msg.startsWith('User:');\r\n                 const isSystemOrAI = msg.startsWith('System:') || msg.startsWith('AI:'); // Backend now uses \"AI:\"\r\n                 const prefix = isUser ? 'User:' : (msg.startsWith('AI:') ? 'AI:' : 'System:');\r\n                 const bubbleClass = isUser ? styles.userBubble : styles.aiBubble;\r\n                 const cleanedMsg = cleanMessage(msg, prefix);\r\n\r\n                 // Determine if the message should be displayed\r\n                 const display = isUser || (isSystemOrAI && shouldDisplaySystemMessage(msg));\r\n\r\n                 if (cleanedMsg && display) {\r\n                     return (\r\n                        <div key={idx} className={bubbleClass}>\r\n                          {/* Render potentially multi-line messages correctly */}\r\n                          <p style={{ whiteSpace: 'pre-wrap' }}>{cleanedMsg}</p>\r\n                        </div>\r\n                     );\r\n                 }\r\n                 return null;\r\n              })}\r\n\r\n              {(isLoading || pipelineStatus.startsWith('processing_')) && (\r\n                <div className={styles.loadingIndicator}>\r\n                  <p>{pipelineStatus.startsWith('processing_') ? pipelineMessage : 'Thinking...'}</p>\r\n                </div>\r\n              )}\r\n               {pipelineStatus === 'error' && pipelineStatus !== 'conversation_complete' && !isFinal && (\r\n                  <div className={`${styles.pipelineMessage} ${styles.errorMessage}`}>❌ {pipelineMessage}</div>\r\n              )}\r\n              <div ref={conversationEndRef} />\r\n            </div>\r\n\r\n            {pipelineStatus === 'conversation' && !isFinal && (\r\n              <form className={styles.responseForm} onSubmit={handleSubmit}>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Type your answer here...\"\r\n                  value={userResponse}\r\n                  onChange={e => setUserResponse(e.target.value)}\r\n                  required\r\n                  disabled={isLoading}\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className={styles.submitButton}\r\n                  disabled={isLoading || !userResponse.trim()}\r\n                >\r\n                  {isLoading ? 'Sending...' : 'Send'}\r\n                </button>\r\n              </form>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}