{"ast":null,"code":"var _jsxFileName = \"D:\\\\AutoML\\\\app\\\\frontend\\\\src\\\\pages\\\\Conversation.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styles from './conversation_style.module.css';\nimport { callApi } from '../api/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Conversation() {\n  _s();\n  const {\n    state\n  } = useLocation();\n  const [conversation, setConversation] = useState([]);\n  const [userResponse, setUserResponse] = useState('');\n  const [isFinal, setIsFinal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const conversationEndRef = useRef(null);\n  useEffect(() => {\n    var _conversationEndRef$c;\n    (_conversationEndRef$c = conversationEndRef.current) === null || _conversationEndRef$c === void 0 ? void 0 : _conversationEndRef$c.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [conversation]);\n  const filterAndSetConversation = convoData => {\n    const filteredConvo = (convoData === null || convoData === void 0 ? void 0 : convoData.filter(line => {\n      return true;\n    })) || [];\n    setConversation(filteredConvo);\n  };\n  useEffect(() => {\n    const fetchFirstQuestion = async () => {\n      var _state$conversation;\n      if (conversation.length === 0 && (state === null || state === void 0 ? void 0 : (_state$conversation = state.conversation) === null || _state$conversation === void 0 ? void 0 : _state$conversation.length) === 2) {\n        setIsLoading(true);\n        try {\n          var _data$conversation;\n          const data = await callApi('conversation', 'GET');\n          const initialFilteredConvo = ((_data$conversation = data.conversation) === null || _data$conversation === void 0 ? void 0 : _data$conversation.filter((line, index) => {\n            return !(index === 0 && line.startsWith('User:'));\n          })) || [];\n          setConversation(initialFilteredConvo);\n          if (data.final_problem) setIsFinal(true);\n        } catch (err) {\n          console.error('Failed to load first question:', err);\n        } finally {\n          setIsLoading(false);\n        }\n      } else if (state !== null && state !== void 0 && state.conversation) {\n        const initialFilteredConvo = state.conversation.filter((line, index) => {\n          return !(index === 0 && line.startsWith('User:'));\n        }) || [];\n        if (state.final_problem) {\n          setIsFinal(true);\n        }\n        if (conversation.length === 0 && !isLoading) {\n          setConversation(initialFilteredConvo);\n        }\n      }\n    };\n    fetchFirstQuestion();\n  }, [state]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!userResponse.trim() || isLoading) return;\n    const answer = userResponse.trim();\n    const currentConvo = conversation;\n    setUserResponse('');\n    setIsLoading(true);\n    const updatedConvoUI = [...currentConvo, `User: ${answer}`];\n    setConversation(updatedConvoUI);\n    try {\n      const data = await callApi('conversation', 'POST', {\n        user_response: answer\n      });\n      const newConvoFromBackend = data.conversation || [];\n      const finalFilteredConvo = newConvoFromBackend.filter((line, i) => {\n        return !(i === 0 && line.startsWith('User:'));\n      });\n      setConversation(finalFilteredConvo);\n      if (data.final_problem) setIsFinal(true);\n    } catch (err) {\n      console.error('API call failed:', err);\n      setConversation(currentConvo);\n      setUserResponse(answer);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const cleanMessage = (msg, prefixToRemove) => {\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\n    return cleaned;\n  };\n\n  // --- IMPORTANT: Replace placeholders if actual prompts differ significantly ---\n  const feedback = {\n    SYSTEM_PROMPT_INITIAL: \"placeholder for initial system prompt text\",\n    SYSTEM_PROMPT_NEXT_ITERATION: \"placeholder for next iteration system prompt text\"\n  };\n  const shouldDisplaySystemMessage = msg => {\n    const content = msg.replace('System:', '').trim().toLowerCase();\n    // Normalize content by removing potential markdown for checks\n    const normalizedContent = content.replace(/\\*\\*/g, '');\n\n    // Return 'false' (do not display) if any of these conditions are met\n    return !(content.startsWith('you are ') || content.startsWith('your task is') || content.includes('format 1:') || content.includes('format 2:') || content.includes('decide if you now have enough information') || content.includes('continue the process') ||\n    // --- Add conditions to filter the final problem structuring instruction ---\n    normalizedContent.includes('structure a well-defined business problem statement') || normalizedContent.includes(\"your response should only include the final business problem statement\") || normalizedContent.includes(\"based on the entire conversation\") && normalizedContent.includes(\"final business problem statement\") ||\n    // More general check for this type of instruction\n    // --- Filter based on known system prompts (replace placeholders above) ---\n    content === feedback.SYSTEM_PROMPT_INITIAL.toLowerCase() || content === feedback.SYSTEM_PROMPT_NEXT_ITERATION.toLowerCase());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.conversationPageWrapper,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.chatWindow,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.header,\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Getting On Track...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.conversation,\n        children: [conversation.map((msg, idx) => {\n          if (msg.startsWith('User:')) {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.userBubble,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: cleanMessage(msg, 'User:')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 19\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this);\n          } else if (msg.startsWith('AI:')) {\n            // Assume AI might also give instructions sometimes, apply similar logic?\n            // For now, just display cleaned AI messages. If AI gives meta-instructions,\n            // you might need a shouldDisplayAIMessage function too.\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.aiBubble,\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: cleanMessage(msg, 'AI:')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 19\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this);\n          } else if (msg.startsWith('System:')) {\n            // Only display system message if the filter function returns true\n            if (shouldDisplaySystemMessage(msg)) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.aiBubble,\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: cleanMessage(msg, 'System:')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 28\n                }, this)\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 25\n              }, this);\n            }\n          }\n          // If message is System and shouldDisplaySystemMessage returned false, render nothing\n          return null;\n        }), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.loadingIndicator,\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Thinking...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: conversationEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), isFinal ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.savedMessage,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Your final business problem has been saved for later use.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Input form\n      _jsxDEV(\"form\", {\n        className: styles.responseForm,\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your answer here...\",\n          value: userResponse,\n          onChange: e => setUserResponse(e.target.value),\n          required: true,\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: styles.submitButton,\n          disabled: isLoading || !userResponse.trim(),\n          children: isLoading ? 'Sending...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n_s(Conversation, \"R+6/j3ZzHYvH7jqkh1SHKBiD58c=\", false, function () {\n  return [useLocation];\n});\n_c = Conversation;\nvar _c;\n$RefreshReg$(_c, \"Conversation\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useLocation","styles","callApi","jsxDEV","_jsxDEV","Conversation","_s","state","conversation","setConversation","userResponse","setUserResponse","isFinal","setIsFinal","isLoading","setIsLoading","conversationEndRef","_conversationEndRef$c","current","scrollIntoView","behavior","filterAndSetConversation","convoData","filteredConvo","filter","line","fetchFirstQuestion","_state$conversation","length","_data$conversation","data","initialFilteredConvo","index","startsWith","final_problem","err","console","error","handleSubmit","e","preventDefault","trim","answer","currentConvo","updatedConvoUI","user_response","newConvoFromBackend","finalFilteredConvo","i","cleanMessage","msg","prefixToRemove","cleaned","substring","replace","feedback","SYSTEM_PROMPT_INITIAL","SYSTEM_PROMPT_NEXT_ITERATION","shouldDisplaySystemMessage","content","toLowerCase","normalizedContent","includes","className","conversationPageWrapper","children","chatWindow","header","fileName","_jsxFileName","lineNumber","columnNumber","map","idx","userBubble","aiBubble","loadingIndicator","ref","savedMessage","responseForm","onSubmit","type","placeholder","value","onChange","target","required","disabled","submitButton","_c","$RefreshReg$"],"sources":["D:/AutoML/app/frontend/src/pages/Conversation.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport styles from './conversation_style.module.css';\r\nimport { callApi } from '../api/client';\r\n\r\nexport default function Conversation() {\r\n  const { state } = useLocation();\r\n  const [conversation, setConversation] = useState([]);\r\n  const [userResponse, setUserResponse] = useState('');\r\n  const [isFinal, setIsFinal] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const conversationEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    conversationEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [conversation]);\r\n\r\n  const filterAndSetConversation = (convoData) => {\r\n      const filteredConvo = convoData?.filter(line => {\r\n          return true;\r\n      }) || [];\r\n      setConversation(filteredConvo);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchFirstQuestion = async () => {\r\n       if (conversation.length === 0 && state?.conversation?.length === 2) {\r\n           setIsLoading(true);\r\n           try {\r\n             const data = await callApi('conversation', 'GET');\r\n             const initialFilteredConvo = data.conversation?.filter((line, index) => {\r\n                 return !(index === 0 && line.startsWith('User:'));\r\n             }) || [];\r\n             setConversation(initialFilteredConvo);\r\n             if (data.final_problem) setIsFinal(true);\r\n           } catch (err) {\r\n             console.error('Failed to load first question:', err);\r\n           } finally {\r\n             setIsLoading(false);\r\n           }\r\n       } else if (state?.conversation) {\r\n           const initialFilteredConvo = state.conversation.filter((line, index) => {\r\n               return !(index === 0 && line.startsWith('User:'));\r\n           }) || [];\r\n           if (state.final_problem) {\r\n                setIsFinal(true);\r\n           }\r\n           if (conversation.length === 0 && !isLoading) {\r\n                setConversation(initialFilteredConvo);\r\n           }\r\n       }\r\n    };\r\n    fetchFirstQuestion();\r\n  }, [state]);\r\n\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!userResponse.trim() || isLoading) return;\r\n\r\n    const answer = userResponse.trim();\r\n    const currentConvo = conversation;\r\n\r\n    setUserResponse('');\r\n    setIsLoading(true);\r\n\r\n    const updatedConvoUI = [...currentConvo, `User: ${answer}`];\r\n    setConversation(updatedConvoUI);\r\n\r\n    try {\r\n      const data = await callApi('conversation', 'POST', { user_response: answer });\r\n      const newConvoFromBackend = data.conversation || [];\r\n\r\n      const finalFilteredConvo = newConvoFromBackend.filter((line, i) => {\r\n           return !(i === 0 && line.startsWith('User:'));\r\n      });\r\n\r\n      setConversation(finalFilteredConvo);\r\n      if (data.final_problem) setIsFinal(true);\r\n\r\n    } catch (err) {\r\n      console.error('API call failed:', err);\r\n      setConversation(currentConvo);\r\n      setUserResponse(answer);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const cleanMessage = (msg, prefixToRemove) => {\r\n    let cleaned = msg.startsWith(prefixToRemove) ? msg.substring(prefixToRemove.length).trim() : msg.trim();\r\n    cleaned = cleaned.replace(/^question\\s*\\d+\\)\\s*/i, '').trim();\r\n    return cleaned;\r\n  };\r\n\r\n  // --- IMPORTANT: Replace placeholders if actual prompts differ significantly ---\r\n  const feedback = {\r\n      SYSTEM_PROMPT_INITIAL: \"placeholder for initial system prompt text\",\r\n      SYSTEM_PROMPT_NEXT_ITERATION: \"placeholder for next iteration system prompt text\"\r\n  };\r\n\r\n  const shouldDisplaySystemMessage = (msg) => {\r\n    const content = msg.replace('System:', '').trim().toLowerCase();\r\n    // Normalize content by removing potential markdown for checks\r\n    const normalizedContent = content.replace(/\\*\\*/g, '');\r\n\r\n    // Return 'false' (do not display) if any of these conditions are met\r\n    return !(\r\n      content.startsWith('you are ') ||\r\n      content.startsWith('your task is') ||\r\n      content.includes('format 1:') ||\r\n      content.includes('format 2:') ||\r\n      content.includes('decide if you now have enough information') ||\r\n      content.includes('continue the process') ||\r\n      // --- Add conditions to filter the final problem structuring instruction ---\r\n      normalizedContent.includes('structure a well-defined business problem statement') ||\r\n      normalizedContent.includes(\"your response should only include the final business problem statement\") ||\r\n      (normalizedContent.includes(\"based on the entire conversation\") && normalizedContent.includes(\"final business problem statement\")) || // More general check for this type of instruction\r\n      // --- Filter based on known system prompts (replace placeholders above) ---\r\n      content === feedback.SYSTEM_PROMPT_INITIAL.toLowerCase() ||\r\n      content === feedback.SYSTEM_PROMPT_NEXT_ITERATION.toLowerCase()\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n    <div className={styles.conversationPageWrapper}>\r\n      <div className={styles.chatWindow}>\r\n        <div className={styles.header}>\r\n          <h1>Getting On Track...</h1>\r\n        </div>\r\n\r\n        <div className={styles.conversation}>\r\n          {conversation.map((msg, idx) => {\r\n            if (msg.startsWith('User:')) {\r\n              return (\r\n                <div key={idx} className={styles.userBubble}>\r\n                  <p>{cleanMessage(msg, 'User:')}</p>\r\n                </div>\r\n              );\r\n            } else if (msg.startsWith('AI:')) {\r\n               // Assume AI might also give instructions sometimes, apply similar logic?\r\n               // For now, just display cleaned AI messages. If AI gives meta-instructions,\r\n               // you might need a shouldDisplayAIMessage function too.\r\n              return (\r\n                <div key={idx} className={styles.aiBubble}>\r\n                  <p>{cleanMessage(msg, 'AI:')}</p>\r\n                </div>\r\n              );\r\n            } else if (msg.startsWith('System:')) {\r\n                // Only display system message if the filter function returns true\r\n                if (shouldDisplaySystemMessage(msg)) {\r\n                    return (\r\n                        <div key={idx} className={styles.aiBubble}>\r\n                           <p>{cleanMessage(msg, 'System:')}</p>\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n            // If message is System and shouldDisplaySystemMessage returned false, render nothing\r\n            return null;\r\n          })}\r\n          {/* Loading indicator */}\r\n          {isLoading && <div className={styles.loadingIndicator}><p>Thinking...</p></div>}\r\n          {/* Div to scroll to */}\r\n          <div ref={conversationEndRef} />\r\n        </div>\r\n\r\n        {/* Final message display */}\r\n        {isFinal ? (\r\n          <div className={styles.savedMessage}>\r\n            <p>Your final business problem has been saved for later use.</p>\r\n          </div>\r\n        ) : (\r\n          // Input form\r\n          <form className={styles.responseForm} onSubmit={handleSubmit}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type your answer here...\"\r\n              value={userResponse}\r\n              onChange={e => setUserResponse(e.target.value)}\r\n              required\r\n              disabled={isLoading}\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className={styles.submitButton}\r\n              disabled={isLoading || !userResponse.trim()}\r\n            >\r\n              {isLoading ? 'Sending...' : 'Send'}\r\n            </button>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}