# routes/visualization_generator.py

import google.generativeai as genai
import os
import sys

# ... (Keep API Key, Model Name, Client Configuration as before) ...
GOOGLE_API_KEY = "AIzaSyBF8Ik7v2Uwy_cRVzoDEj30g2oNpXPPlrQ"
MODEL_NAME = "gemini-2.0-flash" # Or "gemini-pro". Flash is faster, Pro might be slightly better at complex code.

# Configure the Gemini client globally
client_configured = False
model = None
try:
    if not GOOGLE_API_KEY or GOOGLE_API_KEY == "YOUR_GOOGLE_AI_API_KEY":
        print("⚠ Warning [VizGen]: Google API Key not set or is placeholder.", file=sys.stderr)
    else:
        genai.configure(api_key=GOOGLE_API_KEY)
        model = genai.GenerativeModel(MODEL_NAME)
        print(f"Google AI client configured for Visualization Generator using model {MODEL_NAME}.")
        client_configured = True
except Exception as e:
    print(f"❌ Error configuring Google AI client [VizGen]: {e}", file=sys.stderr)


# --- REVISED Prompt Template with Added Context ---
SYSTEM_INSTRUCTION_VISUALIZATION_GENERATOR_TEMPLATE = r"""
You are an expert Python data visualization programmer generating code for an SME audience (simple, clear charts). Create a complete, executable Python script based *strictly* on the provided plan and context.

**Output ONLY raw Python code.** No explanations, no markdown formatting like ```python. Start directly with imports.

Note: Generate atleast 4-5 various visualization plots from EDA to ML to visualizations.

*Input Context:*

<visualization_plan>
{visualization_plan_str}
</visualization_plan>

<processed_data_path>
{processed_data_path_str}
</processed_data_path>

<business_problem>
{business_problem_str}
</business_problem>

<visualization_output_directory>
{visualization_output_dir_str}
</visualization_output_directory>

<processed_file_details>
This section contains details about the processed data file that will be loaded, including column names and basic stats. Use this to confirm column names before plotting.
{processed_file_details_str}
</processed_file_details>

<ml_output_logs>
This section contains the logs generated by the preceding Machine Learning script execution. Look here for calculated feature importances, model performance metrics (like R-squared, MAE), or potentially sample predictions if they were printed to the log.
{ml_output_logs_str}
</ml_output_logs>

*Instructions for Python Script Generation:*

1.  *Imports:* Import pandas, matplotlib.pyplot as plt, seaborn as sns, os. Import other libraries like numpy or specific sklearn modules ONLY if absolutely required by the plan or to extract data from logs.
2.  *Output Directory:* Ensure the output directory exists using `os.makedirs('{visualization_output_dir_str}', exist_ok=True)`.
3.  *Load Data:* Load the processed dataset using `pd.read_csv(r"{processed_data_path_str}")`. Use a `try-except FileNotFoundError`. **Verify required column names against `<processed_file_details>` before using them.**
4.  *Extract ML Results:* If the plan requires ML outputs (feature importances, predictions, residuals, metrics like R-squared):
    *   **Attempt to parse these values directly from the `<ml_output_logs>`.** Look for clear markers or structured output in the logs.
    *   If specific values (like feature importances) are *not* clearly extractable from logs, **only then** should you attempt to recalculate them *if* the necessary ML code context (`ML.py`) was included in the `<visualization_plan>` (which it usually isn't).
    *   **Crucially: Do NOT hardcode values** unless the plan *explicitly* provides them as constants to use. If you cannot find or calculate the necessary ML output data, print a clear warning message for that specific chart and skip its generation.
5.  *Generate Code per Visualization (from Plan):*
    *   Implement each chart described in the `<visualization_plan>`.
    *   Use the specified chart type (prefer simple: bar, scatter, histogram, line, box).
    *   Use the exact data columns mentioned in the plan, **confirming their existence via `<processed_file_details>`**. Handle potential `KeyError` exceptions gracefully for individual charts (print warning, continue).
    *   Use ML outputs extracted/calculated in step 4 where required by the plan.
    *   Set clear, business-oriented titles and axis labels based on the plan's insight/value description.
    *   Apply styling/annotations as suggested in the plan's "Clarity Tip". Default to Seaborn/Matplotlib.
    *   *Save Each Plot:* Save each plot to a unique file (e.g., `visualization_1_type.png`) inside `{visualization_output_dir_str}` using `os.path.join()` and `plt.savefig(..., bbox_inches='tight')`. Use `plt.close()` afterwards.
6.  *Error Handling:* Wrap individual chart generation blocks in `try-except` blocks. Print informative error/warning messages if a chart fails or is skipped, but allow the script to continue to the next chart.
7.  *Final Output:* Only the raw Python code.

Important: Generate atleast 4-5 various visualization plots from EDA to ML to visualizations.

Remember: Verify columns with `<processed_file_details>`, extract ML results from `<ml_output_logs>`, avoid hardcoding, handle errors gracefully per chart.
"""

# --- Generic Gemini Response Function (Keep as before) ---
def generate_response(prompt_content: str):
    # ... (Keep the existing implementation) ...
    if not client_configured or model is None:
        return "# Error: Google AI client not configured for Visualization Generator."

    try:
        print(f"Sending request to {MODEL_NAME} [VizGen]...")
        generation_config = genai.types.GenerationConfig(temperature=0.15)

        response = model.generate_content(
            contents=prompt_content,
            generation_config=generation_config
        )
        print("Response received [VizGen].")

        if response.prompt_feedback and response.prompt_feedback.block_reason:
            error_msg = f"# Error [VizGen]: Prompt blocked by Google AI due to {response.prompt_feedback.block_reason}"
            print(f"❌ {error_msg}", file=sys.stderr)
            return error_msg
        try:
            text = response.text
        except (ValueError, AttributeError) as e:
             error_msg = f"# Error [VizGen]: No content generated or unexpected format ({e})."
             if response.candidates and response.candidates[0].finish_reason != 'STOP':
                 error_msg += f" Finish Reason: {response.candidates[0].finish_reason}"
             print(f"❌ {error_msg} (Candidates: {response.candidates})", file=sys.stderr)
             return error_msg

        text = text.strip()
        # Stronger cleaning for markdown code blocks
        if text.startswith("```python"):
            text = text[len("```python"):].strip()
        elif text.startswith("```"):
             text = text[len("```"):].strip() # Handle case without 'python'
        if text.endswith("```"):
            text = text[:-3].strip()
        return text

    except Exception as e:
        print(f"❌ An error occurred during Google AI API call [VizGen]: {e}", file=sys.stderr)
        return f"# Error generating visualization code via Google AI: {e}"


# --- UPDATED Function to Generate Visualization Code ---
def generate_visualization_code(visualization_plan_str: str,
                                processed_data_path_str: str,
                                business_problem_str: str,
                                visualization_output_dir_str: str,
                                # --- NEW PARAMETERS ---
                                processed_file_details_str: str,
                                ml_output_logs_str: str
                                # --- END NEW PARAMETERS ---
                                ) -> str:
    """
    Generates Python code for visualizations based on the plan and context.
    """
    if not client_configured:
        return "# Error: Cannot generate visualization code, Google AI client not configured."

    print("--- Generating Visualization Code with Context ---")

    # Format the prompt with all context
    prompt_content = SYSTEM_INSTRUCTION_VISUALIZATION_GENERATOR_TEMPLATE.format(
        visualization_plan_str=visualization_plan_str,
        processed_data_path_str=processed_data_path_str,
        business_problem_str=business_problem_str,
        visualization_output_dir_str=visualization_output_dir_str,
        # --- NEW CONTEXT ---
        processed_file_details_str=processed_file_details_str,
        ml_output_logs_str=ml_output_logs_str
        # --- END NEW CONTEXT ---
    )

    # Generate the code
    viz_code = generate_response(prompt_content)

    # Apply cleaning just in case generate_response didn't catch everything
    cleaned_code = viz_code.strip()
    if cleaned_code.startswith("```python"):
        cleaned_code = cleaned_code[len("```python"):].strip()
    elif cleaned_code.startswith("```"):
         cleaned_code = cleaned_code[len("```"):].strip()
    if cleaned_code.endswith("```"):
        cleaned_code = cleaned_code[:-3].strip()


    print("Visualization Code Generation Complete.")
    return cleaned_code # Return potentially cleaned code

# --- Function to Save Visualization Code (Keep as before) ---
def save_visualization_code(code: str, filename: str):
    # ... (Keep the existing implementation) ...
    save_dir = os.path.dirname(filename)
    base_filename = os.path.basename(filename)

    try:
        if not save_dir:
             save_dir = "."
        os.makedirs(save_dir, exist_ok=True)
        file_path = os.path.join(save_dir, base_filename)

        if code is None or code.startswith("# Error"):
            print(f"❌ Error saving file: Code content is invalid or None.")
            if code:
                with open(file_path, "w", encoding='utf-8') as f:
                    f.write(f"# Generation Failed:\n{code}")
                print(f"⚠ Error message saved to: {file_path}")
            return False

        with open(file_path, "w", encoding='utf-8') as f:
            f.write(code)
        print(f"✅ Visualization script saved successfully at: {file_path}")
        return True

    except OSError as e:
        print(f"❌ Error creating directory or saving file {filename}: {e}")
    except Exception as e:
        print(f"❌ An unexpected error occurred during viz code saving: {e}")
    return False